<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋过冬漫长</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://chaooo.github.io/atom.xml" rel="self"/>
  
  <link href="http://chaooo.github.io/"/>
  <updated>2022-08-17T14:32:30.513Z</updated>
  <id>http://chaooo.github.io/</id>
  
  <author>
    <name>郑超(Charles·Zheng)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「数据结构与算法」红黑树</title>
    <link href="http://chaooo.github.io/2022/04/25/data-structure-redblacktree.html"/>
    <id>http://chaooo.github.io/2022/04/25/data-structure-redblacktree.html</id>
    <published>2022-04-25T11:05:10.000Z</published>
    <updated>2022-08-17T14:32:30.513Z</updated>
    
    <content type="html"><![CDATA[<p>平衡二叉查找树其实有很多，比如，红黑树（Red-Black Tree，简称 R-B Tree）、伸展树（Splay Tree）、树堆（Treap）等，但是我们提到平衡二叉查找树，听到的基本都是红黑树，它是一种不严格的平衡二叉查找树。<br>红黑树是一种含有红黑节点并能自平衡的二叉查找树。它必须满足下面性质：</p><ol><li>每个节点要么是红色，要么是黑色；</li><li>根节点是黑色的；</li><li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li><li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li><li>任意一节点到每个叶子节点的路径，都包含相同数目的黑色节点；<span id="more"></span></li></ol><h3 id="1-红黑树的平衡特征"><a href="#1-红黑树的平衡特征" class="headerlink" title="1. 红黑树的平衡特征"></a>1. 红黑树的平衡特征</h3><p>红黑树与<code>AVL</code>树类似，都在添加和删除的时候通过旋转操作保持二叉树的平衡，以求更高效的查询性能。</p><p><strong>红黑树牺牲了部分平衡性</strong>，以换取插入&#x2F;删除操作时较少的旋转操作，整体来说性能要优于<code>AVL</code>树。</p><p>红黑树的黑色属性（即性质第五点）：任意一节点到每个叶子节点的路径，都包含相同数目的黑色节点。<br>黑色属性，可以理解为<strong>平衡特征</strong>， 如果满足不了平衡特征，就要进行平衡操作（变色、左旋、右旋）。</p><p>红黑树的平衡条件，是以<strong>黑色节点的高度</strong>来约束的，所以称红黑树这种平衡为<strong>黑色完美平衡</strong>。</p><p>如下图，去掉红色节点，会得到一个四叉树， 从根节点到每一个叶子节点高度相同，就是红黑树的根节点到叶子的黑色路径长度。<br><img src="/2022/04/25/data-structure-redblacktree/09_01.png"></p><h3 id="2-红黑树的平衡调整"><a href="#2-红黑树的平衡调整" class="headerlink" title="2. 红黑树的平衡调整"></a>2. 红黑树的平衡调整</h3><p>三种操作：左旋（rotate left）、右旋（rotate right）和 变色。</p><ul><li><p>左旋，即是<strong>逆时针</strong>旋转，以某个节点作为旋转点，其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变；<br><img src="/2022/04/25/data-structure-redblacktree/rotate_left.gif"></p></li><li><p>右旋，即是<strong>顺时针</strong>旋转，以某个节点作为旋转点，其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。<br><img src="/2022/04/25/data-structure-redblacktree/rotate_right.gif"></p></li><li><p>变色，节点的颜色由红变黑或由黑变红；</p></li></ul><h3 id="3-插入操作的平衡调整"><a href="#3-插入操作的平衡调整" class="headerlink" title="3. 插入操作的平衡调整"></a>3. 插入操作的平衡调整</h3><p>红黑树规定，<strong>插入的节点一定是红色的</strong>。而且，<strong>二叉查找树中新插入的节点都是放在叶子节点上</strong>。</p><p>红黑树的平衡调整过程是一个迭代的过程。<br>我们把正在处理的节点叫做<strong>关注节点</strong>。关注节点会随着不停地迭代处理，而不断发生变化。<strong>最开始的关注节点就是新插入的节点</strong>。</p><ol><li><p>新插入节点的父节点是黑色的，红黑树不需要调整。</p></li><li><p>新插入节点是根节点，<strong>根节点变黑</strong>即可。</p></li><li><p>新插入节点的父节点和它的叔叔都是红色，红黑树只需要<strong>变色</strong>，不需要旋转。<br><img src="/2022/04/25/data-structure-redblacktree/09_02.png"></p></li><li><p>新插入节点的父节点是红色，但它叔叔是黑色（可能为null的黑色空节点），红黑树需要<strong>变色+旋转</strong>。</p></li></ol><p>需要红黑树<strong>变色+旋转</strong>（父节点红色，叔节点黑色）的四种情形：</p><ul><li><p>一、<strong>LL型</strong>（左左插），即父节点和插入的节点都是左节点：</p><ul><li>①父节点变黑色，爷节点变红色</li><li>②爷节点右旋<br><img src="/2022/04/25/data-structure-redblacktree/09_03.png"></li></ul></li><li><p>二、<strong>LR型</strong>（左右插），即父节点是左节点，插入节点是右节点：</p><ul><li>①父节点左旋，父子交换变成了【情形一·LL】</li><li>②跳到【LL型】的调整<br><img src="/2022/04/25/data-structure-redblacktree/09_04.png"></li></ul></li><li><p>三、<strong>RR型</strong>（右右插），即父节点和插入的节点都是右节点：</p><ul><li>①父节点变黑色，爷节点变红色</li><li>②爷节点左旋<br><img src="/2022/04/25/data-structure-redblacktree/09_05.png"></li></ul></li><li><p>二、<strong>RL型</strong>（右左插），即父节点是右节点，插入的节点是左节点：</p><ul><li>①父节点右旋，父子交换变成了【情形三·RR】</li><li>②跳到【RR型】的调整<br><img src="/2022/04/25/data-structure-redblacktree/09_06.png"></li></ul></li></ul><h3 id="4-删除操作的平衡调整"><a href="#4-删除操作的平衡调整" class="headerlink" title="4. 删除操作的平衡调整"></a>4. 删除操作的平衡调整</h3><p>红黑树的删除情况相对插入会复杂一些，不过原理都是类似的。</p><h4 id="4-1-二叉查找树的删除操作"><a href="#4-1-二叉查找树的删除操作" class="headerlink" title="4.1 二叉查找树的删除操作"></a>4.1 二叉查找树的删除操作</h4><ol><li>待删除节点没有子节点，将父节点中，指向要删除节点的指针置为<code>null</code>。</li><li>待删除节点只有一个子节点，更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点。</li><li>待删除节点有两个子节点，用后继节点或者前继节点替换删除节点，然后再删除掉替换节点。<blockquote><ul><li>后继节点：删除节点的右子树中的最小节点，即右子树中最左节点。</li><li>前继节点：删除节点的左子树中最大节点，即左子树中最右节点。</li></ul></blockquote></li></ol><h4 id="4-2-红黑树的删除动作"><a href="#4-2-红黑树的删除动作" class="headerlink" title="4.2 红黑树的删除动作"></a>4.2 红黑树的删除动作</h4><p>红黑树和二叉查找树的删除类似，只不过加上颜色属性（这里的子节点均指<strong>非黑色叶子NULL节点</strong>）：</p><ol><li><p>无子节点时，删除节点可能为红色或者黑色；</p><ul><li>1.1 如果为红色，直接删除即可，不会影响黑色节点的数量；</li><li>1.2 如果为黑色，则需要进行删除平衡的操作（如果是根节点，无需平衡操作）；<br><img src="/2022/04/25/data-structure-redblacktree/09_07.png"></li></ul></li><li><p>只有一个子节点时，删除节点只能是黑色，其子节点是红色（否则无法满足红黑树的性质）。 此时用删除节点的子节点接到父节点，且将子节点颜色涂黑，保证黑色数量。<br><img src="/2022/04/25/data-structure-redblacktree/09_08.png"></p></li><li><p>有两个子节点时，与二叉搜索树一样，使用后继节点作为替换的删除节点，情形转至为【1】或【2】处理。<br><img src="/2022/04/25/data-structure-redblacktree/09_09.png"></p></li></ol><p>删除情形【3】总是会转换为情形【1】或【2】的，<br>而情形【1.2】（删除节点无子节点且是黑色）还需要额外的平衡调整；<br>因为一旦该节点被拿掉，红黑树中通过该节点的路径黑色节点数量将会减1，而且无法像情形【2】那样将子节点涂黑来达到平衡。此时只能自底向上进行平衡操作。</p><h4 id="4-3-红黑树删除后的平衡操作"><a href="#4-3-红黑树删除后的平衡操作" class="headerlink" title="4.3 红黑树删除后的平衡操作"></a>4.3 红黑树删除后的平衡操作</h4><p>为了简化描述，先约定关注节点及相关节点的名称：<br><img src="/2022/04/25/data-structure-redblacktree/09_10.png"></p><h5 id="【情形-1-1】：-兄黑（S-黑），兄子全黑（L-和-R-全黑），父红（P-红）；"><a href="#【情形-1-1】：-兄黑（S-黑），兄子全黑（L-和-R-全黑），父红（P-红）；" class="headerlink" title="【情形 1.1】： 兄黑（S 黑），兄子全黑（L 和 R 全黑），父红（P 红）；"></a>【情形 1.1】： 兄黑（S 黑），兄子全黑（L 和 R 全黑），父红（P 红）；</h5><p>即 兄弟节点为黑色，兄弟节点的子节点全部黑色，父节点为红色。<br><img src="/2022/04/25/data-structure-redblacktree/09_12.png"></p><h5 id="【情形-1-2】：-兄黑（S-黑），兄子全黑（L-和-R-全黑），父黑（P-黑）；"><a href="#【情形-1-2】：-兄黑（S-黑），兄子全黑（L-和-R-全黑），父黑（P-黑）；" class="headerlink" title="【情形 1.2】： 兄黑（S 黑），兄子全黑（L 和 R 全黑），父黑（P 黑）；"></a>【情形 1.2】： 兄黑（S 黑），兄子全黑（L 和 R 全黑），父黑（P 黑）；</h5><p>即 兄弟节点为黑色，兄弟节点的子节点全部黑色，父节点为黑色。<br><img src="/2022/04/25/data-structure-redblacktree/09_13.png"></p><h5 id="【情形-2-1】：-兄黑（S-黑），兄在左（S-左），兄左子红（L-红）；"><a href="#【情形-2-1】：-兄黑（S-黑），兄在左（S-左），兄左子红（L-红）；" class="headerlink" title="【情形 2.1】： 兄黑（S 黑），兄在左（S 左），兄左子红（L 红）；"></a>【情形 2.1】： 兄黑（S 黑），兄在左（S 左），兄左子红（L 红）；</h5><p>即 兄弟节点为黑色，且兄弟节点在左边，兄弟节点的左子节点为红色。<br><img src="/2022/04/25/data-structure-redblacktree/09_14.png"></p><h5 id="【情形-2-2】：-兄黑（S-黑），兄在左（S-左），兄左子黑（L-黑）；"><a href="#【情形-2-2】：-兄黑（S-黑），兄在左（S-左），兄左子黑（L-黑）；" class="headerlink" title="【情形 2.2】： 兄黑（S 黑），兄在左（S 左），兄左子黑（L 黑）；"></a>【情形 2.2】： 兄黑（S 黑），兄在左（S 左），兄左子黑（L 黑）；</h5><p>即 兄弟节点为黑色，且兄弟节点在左边，兄弟节点的左子节点为黑色。<br><img src="/2022/04/25/data-structure-redblacktree/09_15.png"></p><h5 id="【情形-2-3】：-兄黑（S-黑），兄在右（S-右），兄右子红（R-红）；"><a href="#【情形-2-3】：-兄黑（S-黑），兄在右（S-右），兄右子红（R-红）；" class="headerlink" title="【情形 2.3】： 兄黑（S 黑），兄在右（S 右），兄右子红（R 红）；"></a>【情形 2.3】： 兄黑（S 黑），兄在右（S 右），兄右子红（R 红）；</h5><p>即 兄弟节点为黑色，且兄弟节点在右边，兄弟节点的右子节点为红色。<br><img src="/2022/04/25/data-structure-redblacktree/09_16.png"></p><h5 id="【情形-2-4】：-兄黑（S-黑），兄在右（S-右），兄右子黑（R-黑）；"><a href="#【情形-2-4】：-兄黑（S-黑），兄在右（S-右），兄右子黑（R-黑）；" class="headerlink" title="【情形 2.4】： 兄黑（S 黑），兄在右（S 右），兄右子黑（R 黑）；"></a>【情形 2.4】： 兄黑（S 黑），兄在右（S 右），兄右子黑（R 黑）；</h5><p>即 兄弟节点为黑色，且兄弟节点在右边，兄弟节点的右子节点为黑色。<br><img src="/2022/04/25/data-structure-redblacktree/09_17.png"></p><h5 id="【情形-3-1】：-兄红（S-红），兄在左（S-左）；"><a href="#【情形-3-1】：-兄红（S-红），兄在左（S-左）；" class="headerlink" title="【情形 3.1】： 兄红（S 红），兄在左（S 左）；"></a>【情形 3.1】： 兄红（S 红），兄在左（S 左）；</h5><p>即 兄弟节点为红色，且兄弟节点在左边。<br><img src="/2022/04/25/data-structure-redblacktree/09_18.png"></p><h5 id="【情形-3-2】：-兄红（S-红），兄在右（S-右）；"><a href="#【情形-3-2】：-兄红（S-红），兄在右（S-右）；" class="headerlink" title="【情形 3.2】： 兄红（S 红），兄在右（S 右）；"></a>【情形 3.2】： 兄红（S 红），兄在右（S 右）；</h5><p>即 兄弟节点为红色，且兄弟节点在右边。<br><img src="/2022/04/25/data-structure-redblacktree/09_19.png"></p><h4 id="4-4-红黑树删除总结"><a href="#4-4-红黑树删除总结" class="headerlink" title="4.4 红黑树删除总结"></a>4.4 红黑树删除总结</h4><p>删除动作（移除节点）之后，若待平衡节点是黑色的叶子节点：<br>平衡调整情形，主要根据 [兄节点的位置&#x2F;颜色]、[兄的子节点的颜色]、[父节点颜色] 进行分类：<br><img src="/2022/04/25/data-structure-redblacktree/09_11.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平衡二叉查找树其实有很多，比如，红黑树（Red-Black Tree，简称 R-B Tree）、伸展树（Splay Tree）、树堆（Treap）等，但是我们提到平衡二叉查找树，听到的基本都是红黑树，它是一种不严格的平衡二叉查找树。&lt;br&gt;红黑树是一种含有红黑节点并能自平衡的二叉查找树。它必须满足下面性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点要么是红色，要么是黑色；&lt;/li&gt;
&lt;li&gt;根节点是黑色的；&lt;/li&gt;
&lt;li&gt;每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；&lt;/li&gt;
&lt;li&gt;任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；&lt;/li&gt;
&lt;li&gt;任意一节点到每个叶子节点的路径，都包含相同数目的黑色节点；</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」AVL树</title>
    <link href="http://chaooo.github.io/2022/04/15/data-structure-avltree.html"/>
    <id>http://chaooo.github.io/2022/04/15/data-structure-avltree.html</id>
    <published>2022-04-15T12:05:10.000Z</published>
    <updated>2022-08-17T14:30:22.016Z</updated>
    
    <content type="html"><![CDATA[<p><code>AVL</code>树（得名于发明者G. M. Adelson-Velsky 和 E. M. Landis）本质上是一棵带有平衡条件的二叉搜索树。<br><code>AVL</code>树具有以下<code>2</code>个性质：</p><ol><li>左子树和右子树的深度之差的绝对值不超过<code>1</code>；</li><li>左子树和右子树全都是 <code>AVL</code>树。<span id="more"></span></li></ol><p>其中为了度量左右子树的深度之差，我们引入<code>平衡因子(BF)</code>的概念。</p><blockquote><p>平衡因子： 某个节点的左子树的高度减去右子树的高度得到的差值。</p></blockquote><p>对于一棵 <code>AVL</code>树，里面的所有节点的平衡因子只能取值于<code>-1、0、1</code>，否则，<code>AVL</code>树将是不平衡的并且需要平衡调整。</p><h3 id="1-AVL-树平衡调整"><a href="#1-AVL-树平衡调整" class="headerlink" title="1. AVL 树平衡调整"></a>1. AVL 树平衡调整</h3><p>二叉树的平衡化有两大基础操作： 左旋（rotate left）和右旋（rotate right）。</p><ul><li><p>左旋，即是<strong>逆时针</strong>旋转，以某个节点作为旋转点，其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变；<br><img src="/2022/04/15/data-structure-avltree/rotate_left.gif"></p></li><li><p>右旋，即是<strong>顺时针</strong>旋转，以某个节点作为旋转点，其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。<br><img src="/2022/04/15/data-structure-avltree/rotate_right.gif"></p></li></ul><p>这种旋转在整个平衡化过程中可能进行一次或多次，这两种操作都是从失去平衡的最小子树根节点开始的(即离插入节点最近且平衡因子超过1的祖节点)。</p><p>造成失衡一共有 <code>4</code> 种情况：LL型、LR型、RL型、RR型，如下图所示。</p><ul><li><p><code>LL型</code>平衡调整：对节点<code>C</code>右旋即可。<br><img src="/2022/04/15/data-structure-avltree/08_ll.jpg"></p></li><li><p><code>LR型</code>平衡调整：先对<code>A</code>进行一次左旋再对<code>C</code>进行一次右旋。<br><img src="/2022/04/15/data-structure-avltree/08_lr.jpg"></p></li><li><p><code>RL型</code>平衡调整：先对<code>C</code>进行一次右旋再对<code>A</code>进行一次左旋。<br><img src="/2022/04/15/data-structure-avltree/08_rl.jpg"></p></li><li><p><code>RR型</code>平衡调整：对节点<code>A</code>左旋即可。<br><img src="/2022/04/15/data-structure-avltree/08_rr.jpg"></p></li></ul><h3 id="2-模拟建-AVL-树"><a href="#2-模拟建-AVL-树" class="headerlink" title="2. 模拟建 AVL 树"></a>2. 模拟建 AVL 树</h3><p>按照整数序列 {4,5,7,2,1,3,6} 依次插入<code>AVL</code>树。<br><img src="/2022/04/15/data-structure-avltree/08_demo.png"></p><p>由于<code>AVL</code>树必须保证左右子树平衡(左子树和右子树的深度之差的绝对值不超过<code>1</code>)，</p><p>所以在插入的时候很容易出现不平衡的情况，一旦这样，就需要进行旋转以求达到平衡。</p><p>正是由于这种严格的平衡条件，导致<code>AVL</code>需要花大量时间在调整上，故<code>AVL</code>树一般适用于<strong>查询</strong>场景， 而<strong>不</strong>适用于<strong>增删频繁</strong>的场景。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;AVL&lt;/code&gt;树（得名于发明者G. M. Adelson-Velsky 和 E. M. Landis）本质上是一棵带有平衡条件的二叉搜索树。&lt;br&gt;&lt;code&gt;AVL&lt;/code&gt;树具有以下&lt;code&gt;2&lt;/code&gt;个性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左子树和右子树的深度之差的绝对值不超过&lt;code&gt;1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;左子树和右子树全都是 &lt;code&gt;AVL&lt;/code&gt;树。</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」二叉树</title>
    <link href="http://chaooo.github.io/2022/04/08/data-structure-binarytree.html"/>
    <id>http://chaooo.github.io/2022/04/08/data-structure-binarytree.html</id>
    <published>2022-04-08T10:08:18.000Z</published>
    <updated>2022-08-17T14:22:05.436Z</updated>
    
    <content type="html"><![CDATA[<p>树：树是一种非线性的数据结构，一棵树是<code>n</code>（<code>n&gt;=0</code>）个节点的集合。<br>用来连接相邻节点之间的关系，我们叫做“父子关系”。<br>我们把没有父节点的节点叫做<strong>根节点</strong>，节点的上一层节点是其<strong>父节点</strong>，下一层节点是其<strong>子节点</strong>，拥有相同父节点的子节点之间互称为<strong>兄弟节点</strong>。</p><span id="more"></span><ul><li>树的三个比较相似的概念：高度（Height）、深度（Depth）、层（Level）。<ul><li>节点的高度：节点到叶子节点的最长路径（边数）</li><li>节点的深度：根节点到这个节点所经历的路径（边数）</li><li>节点的层数：节点的深度 <code>+1</code></li></ul></li><li>树的高度：根节点的高度。</li></ul><p><img src="/2022/04/08/data-structure-binarytree/07_01.webp"></p><h3 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1. 二叉树"></a>1. 二叉树</h3><p>二叉树：每个节点<strong>最多</strong>有两个子节点，分别是<strong>左子节点</strong>和<strong>右子节点</strong>。<br>二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树。</p><ul><li>两个比较特殊的二叉树：<ul><li>满二叉树：树中每个分支节点（非叶节点）都有两棵非空子树，并且所有的叶节点都在同一层。</li><li>完全二叉树：除最后一层外，其他层的节点都满；并且最后一层的节点从左到右是连续排列，中间没有断开，空位都在右边。<br><img src="/2022/04/08/data-structure-binarytree/07_02.webp"></li></ul></li></ul><p>有两种方法存储一棵二叉树，一种是基于指针或者引用的<strong>二叉链式存储法</strong>，一种是基于数组的<strong>顺序存储法</strong>。</p><h3 id="2-存储二叉树"><a href="#2-存储二叉树" class="headerlink" title="2. 存储二叉树"></a>2. 存储二叉树</h3><p>基于基于指针的链式存储法。<br>每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针。<br>从根节点开始，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式我们比较常用。大部分二叉树代码都是通过这种结构来实现的。<br><img src="/2022/04/08/data-structure-binarytree/07_03.webp"></p><p>基于数组的顺序存储法。<br>如下图，我们把根节点存储在数组下标 <code>i=1</code> 的位置，那左子节点存储在下标 <code>2*i = 2</code> 的位置，右子节点存储在 <code>2*i+1 = 3</code> 的位置。以此类推，<code>B</code>节点的左子节点存储在 <code>2*i = 2*2 = 4</code> 的位置，右子节点存储在 <code>2*i+1 = 2*2+1 = 5</code> 的位置。<br><img src="/2022/04/08/data-structure-binarytree/07_04.webp"></p><p>如果节点<code>X</code>存储在数组中下标为 <code>i</code> 的位置，下标为 <code>2*i</code> 的位置存储的就是左子节点，下标为<code> 2*i+1</code> 的位置存储的就是右子节点。<br>反过来，下标为 <code>i/2</code> 的位置存储就是它的父节点。<br>通过这种方式，我们只要知道根节点存储的位置（通常根节点会存储在下标为<code>1</code>的位置），这样就可以通过下标计算，把整棵树都串起来。</p><p><strong>堆</strong>其实就是一种<strong>完全二叉树</strong>，最常用的存储方式就是<strong>数组</strong>。</p><h3 id="3-遍历二叉树"><a href="#3-遍历二叉树" class="headerlink" title="3. 遍历二叉树"></a>3. 遍历二叉树</h3><p>经典的方法有三种，<strong>前序遍历</strong>、<strong>中序遍历</strong>和<strong>后序遍历</strong>。</p><ul><li>前序遍历：对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</li><li>中序遍历：对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。</li><li>后序遍历：对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。<br><img src="/2022/04/08/data-structure-binarytree/07_05.webp"></li></ul><p>实际上，二叉树的前、中、后序遍历就是一个<strong>递归的过程</strong>。<br>比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归地打印右子树。</p><h3 id="4-二叉查找树（Binary-Search-Tree）"><a href="#4-二叉查找树（Binary-Search-Tree）" class="headerlink" title="4. 二叉查找树（Binary Search Tree）"></a>4. 二叉查找树（Binary Search Tree）</h3><p>二叉查找树，也叫二叉搜索树。<br>顾名思义，二叉查找树是为了实现<strong>快速查找</strong>而生的。不过，它不仅仅支持快速查找一个数据，还支持快速插入、删除一个数据。</p><p>二叉查找树要求，在树中的<strong>任意一个节点，其左子树中的每个节点的值都比该节点的值小，而右子树节点的值都比该节点的值大</strong>。</p><h4 id="4-1-二叉查找树的查找操作"><a href="#4-1-二叉查找树的查找操作" class="headerlink" title="4.1 二叉查找树的查找操作"></a>4.1 二叉查找树的查找操作</h4><p>先取根节点，如果它等于我们要查找的数据，那就返回。<br>如果要查找的数据比根节点的值小，那就在左子树中递归查找；<br>如果要查找的数据比根节点的值大，那就在右子树中递归查找。<br><img src="/2022/04/08/data-structure-binarytree/07_06.webp"></p><h4 id="4-2-二叉查找树的插入操作"><a href="#4-2-二叉查找树的插入操作" class="headerlink" title="4.2 二叉查找树的插入操作"></a>4.2 二叉查找树的插入操作</h4><p>二叉查找树的插入操作二叉查找树的插入过程有点类似查找操作。<br>新插入的数据一般都是在叶子节点上，所以我们只需要从根节点开始，依次比较要插入的数据和节点的大小关系。<br><img src="/2022/04/08/data-structure-binarytree/07_07.webp"></p><h4 id="4-3-二叉查找树的删除操作"><a href="#4-3-二叉查找树的删除操作" class="headerlink" title="4.3 二叉查找树的删除操作"></a>4.3 二叉查找树的删除操作</h4><p>分三种情况来处理。</p><ol><li>如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为<code>null</code>。(比如图中的删除节点<code>55</code>。)</li><li>如果要删除的节点只有一个子节点，我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了。(比如图中的删除节点<code>13</code>。)</li><li>如果要删除的节点有两个子节点，可以用后继节点或者前继节点替换删除节点，然后再删除掉替换节点。（比如图中的删除节点<code>18</code>。)<blockquote><ul><li>后继节点：删除节点的右子树中的最小节点，即右子树中最左节点。</li><li>前继节点：删除节点的左子树中最大节点，即左子树中最右节点。</li></ul></blockquote></li></ol><p><img src="/2022/04/08/data-structure-binarytree/07_08.webp"></p><h4 id="4-2-二叉查找树的其他操作"><a href="#4-2-二叉查找树的其他操作" class="headerlink" title="4.2 二叉查找树的其他操作"></a>4.2 二叉查找树的其他操作</h4><ul><li>除了插入、删除、查找操作之外，二叉查找树中还可以支持<strong>快速地查找最大节点和最小节点、前驱节点和后继节点</strong>。</li><li><strong>中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 <code>O(n)</code>，非常高效</strong>。因此，二叉查找树也叫作<strong>二叉排序树</strong>。</li><li>支持重复数据的二叉查找树<ol><li>通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。</li><li>每个节点仍然只存储一个数据。新插入值相同的数据当作大于这个节点的值来处理。查找时，遇到值相同的节点不停止，而是继续在右子树中查找，直到遇到叶子节点才停止。这样就可以把键值等于要查找值的所有节点都找出来。删除时，也需要先查找到每个要删除的节点，依次删除。</li></ol></li></ul><h3 id="5-平衡二叉树"><a href="#5-平衡二叉树" class="headerlink" title="5. 平衡二叉树"></a>5. 平衡二叉树</h3><p>二叉查找树支持快速插入、删除、查找操作，各个操作的时间复杂度跟树的高度成正比，也就是<code>O(height)</code>，完全二叉树的高度<code>height&lt;=log2n</code>；理想情况下，时间复杂度是<code>O(logn)</code>。<br>不过，二叉查找树在频繁的动态更新过程中，可能会出现树的高度远大于<code>log2n</code>的情况，从而导致各个操作的效率下降。极端情况下，二叉树会退化为链表，时间复杂度会退化到<code>O(n)</code>。</p><p>为了解决二叉查找树因为动态更新导致的性能退化问题，发明了<strong>平衡二叉查找树</strong>这类数据结构。<br>平衡二叉查找树的高度接近<code>logn</code>，所以插入、删除、查找操作的时间复杂度也比较稳定，是<code>O(logn)</code>。<br>在工程中，很多用到平衡二叉查找树的地方都会用红黑树。红黑树是一种特殊的平衡二叉查找树。</p><p>平衡二叉树的<strong>严格定义</strong>：**二叉树中任意一个节点的左右子树的高度相差不能大于<code>1</code>**。</p><p>从这个定义来看，完全二叉树、满二叉树其实都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。</p><p>但是很多平衡二叉查找树其实并没有符合严格的定义，比如红黑树，它从根节点到各个叶子节点的最长路径，有可能会比最短路径大一倍。</p><p>所以，平衡二叉查找树中“平衡”的意思，其实就是<strong>让整棵树左右看起来比较“对称”、比较“平衡”，不要出现左子树很高、右子树很矮的情况。这样就能让整棵树的高度相对来说低一些，相应的插入、删除、查找等操作的效率高一些</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;树：树是一种非线性的数据结构，一棵树是&lt;code&gt;n&lt;/code&gt;（&lt;code&gt;n&amp;gt;=0&lt;/code&gt;）个节点的集合。&lt;br&gt;用来连接相邻节点之间的关系，我们叫做“父子关系”。&lt;br&gt;我们把没有父节点的节点叫做&lt;strong&gt;根节点&lt;/strong&gt;，节点的上一层节点是其&lt;strong&gt;父节点&lt;/strong&gt;，下一层节点是其&lt;strong&gt;子节点&lt;/strong&gt;，拥有相同父节点的子节点之间互称为&lt;strong&gt;兄弟节点&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」哈希算法</title>
    <link href="http://chaooo.github.io/2022/03/25/data-structure-hashalgorithm.html"/>
    <id>http://chaooo.github.io/2022/03/25/data-structure-hashalgorithm.html</id>
    <published>2022-03-25T13:40:12.000Z</published>
    <updated>2022-08-02T05:49:29.345Z</updated>
    
    <content type="html"><![CDATA[<p>哈希算法（Hash）又称摘要算法（Digest），它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。</p><p>哈希算法最重要的特点就是：相同的输入一定得到相同的输出；不同的输入大概率得到不同的输出。</p><span id="more"></span><p>哈希算法的目的就是为了验证原始数据是否被篡改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java字符串的hashCode()就是一个哈希算法，它的输入是任意字符串，输出是固定的4字节int整数：</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.hashCode(); <span class="comment">// 0x5e918d2</span></span><br><span class="line"><span class="string">&quot;hello, java&quot;</span>.hashCode(); <span class="comment">// 0x7a9d88e8</span></span><br><span class="line"><span class="string">&quot;hello, bob&quot;</span>.hashCode(); <span class="comment">// 0xa0dbae2f</span></span><br></pre></td></tr></table></figure><p>哈希碰撞是指，两个不同的输入得到了相同的输出。一个安全的哈希算法必须满足：碰撞概率低，不能猜测输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;AaAaAa&quot;</span>.hashCode(); <span class="comment">// 0x7460e8c0</span></span><br><span class="line"><span class="string">&quot;BBAaBB&quot;</span>.hashCode(); <span class="comment">// 0x7460e8c0</span></span><br></pre></td></tr></table></figure><h3 id="1-常用的哈希算法"><a href="#1-常用的哈希算法" class="headerlink" title="1. 常用的哈希算法"></a>1. 常用的哈希算法</h3><table><thead><tr><th align="left">算法</th><th align="left">输出长度（位）</th><th align="left">输出长度（字节）</th></tr></thead><tbody><tr><td align="left">MD5</td><td align="left">128 bits</td><td align="left">16 bytes</td></tr><tr><td align="left">SHA-1</td><td align="left">160 bits</td><td align="left">20 bytes</td></tr><tr><td align="left">RipeMD-160</td><td align="left">160 bits</td><td align="left">20 bytes</td></tr><tr><td align="left">SHA-256</td><td align="left">256 bits</td><td align="left">32 bytes</td></tr><tr><td align="left">SHA-512</td><td align="left">512 bits</td><td align="left">64 bytes</td></tr></tbody></table><p>根据碰撞概率，哈希算法的输出长度越长，就越难产生碰撞，也就越安全。</p><h3 id="2-哈希算法的应用"><a href="#2-哈希算法的应用" class="headerlink" title="2. 哈希算法的应用"></a>2. 哈希算法的应用</h3><p>哈希算法的应用非常非常多，这里介绍最常见的七个，分别是安全加密、唯一标识、数据校验、散列函数、负载均衡、数据分片、分布式存储。</p><h4 id="2-1-安全加密"><a href="#2-1-安全加密" class="headerlink" title="2.1 安全加密"></a>2.1 安全加密</h4><p>最常用于加密的哈希算法是 <code>MD5</code>（MD5 Message-Digest Algorithm，MD5 消息摘要算法）和 <code>SHA</code>（Secure Hash Algorithm，安全散列算法）。<br>除了这两个之外，当然还有很多其他加密算法，比如计算机网络的<code>SSL/TLS</code>协议里面的对称加密（<code>AES</code>）、非对称加密（<code>RSA</code>）。</p><p>安全加密的关键点：①很难根据哈希值反向推导出原始数据；②散列冲突的概率要很小。</p><p>不管是什么哈希算法，只能尽量减少碰撞冲突的概率，理论上是无法做到完全不冲突的。<br>一般情况下，哈希值越长的哈希算法，散列冲突的概率越低。</p><p>没有绝对安全的加密。任何哈希算法都会出现散列冲突，但是这个冲突概率非常小。越是复杂哈希算法越难破解，但同样计算时间也就越长。所以，选择哈希算法的时候，要权衡安全性和计算时间来决定用哪种哈希算法。</p><h4 id="2-2-唯一标识"><a href="#2-2-唯一标识" class="headerlink" title="2.2 唯一标识"></a>2.2 唯一标识</h4><p>哈希算法可以对大数据做信息摘要，通过一个较短的二进制编码来表示很大的数据。</p><p>比如<code>URL</code>字段或者图片字段要求不能重复，这个时候就可以通过哈希算法对这个数据取唯一标识，或者说信息摘要（比如<code>MD5</code>处理）。<br>此外，还可以对文件之类的二进制数据做<code>MD5</code>处理，作为唯一标识，这样判定重复文件的时候更快捷。</p><h4 id="2-3-数据校验"><a href="#2-3-数据校验" class="headerlink" title="2.3 数据校验"></a>2.3 数据校验</h4><p>网络传输数据不安全，传输数据的过程中，数据可能被宿主机篡改，或数据丢失，所以需要校验文件的安全，正确，完整性。</p><p>因为哈希算法对数据很敏感，只要文件块的内容有一丁点儿的改变，最后计算出的哈希值就会完全不同；所以在文件块下载完后，使用相同的哈希算法，对于文件计算，判断是否相同。</p><h4 id="2-4-散列函数"><a href="#2-4-散列函数" class="headerlink" title="2.4 散列函数"></a>2.4 散列函数</h4><p>散列函数是设计一个散列表的关键。它直接决定了散列冲突的概率和散列表的性能。不过，散列函数对于散列算法冲突的要求要低很多。即便出现个别散列冲突，只要不是过于严重，我们都可以通过开放寻址法或者链表法解决。</p><p>散列函数中用到的散列算法，更加关注散列后的值是否能平均分布，也就是，一组数据是否能均匀地散列在各个槽中。除此之外，散列函数执行的快慢，也会影响散列表的性能，所以，散列函数用的散列算法一般都比较简单，比较追求效率。</p><h4 id="2-5-负载均衡"><a href="#2-5-负载均衡" class="headerlink" title="2.5 负载均衡"></a>2.5 负载均衡</h4><p>负载均衡算法有很多，比如轮询、随机、加权轮询等。利用哈希算法替代映射表，可以实现一个会话粘滞的负载均衡策略。</p><p>我们可以通过哈希算法，对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。 这样，我们就可以把同一个 IP 过来的所有请求，都路由到同一个后端服务器上。</p><h4 id="2-6-数据分片"><a href="#2-6-数据分片" class="headerlink" title="2.6 数据分片"></a>2.6 数据分片</h4><p>针对海量数据的处理问题，通过哈希算法对处理的海量数据进行分片，多机分布式处理。借助这种分片的思路，可以突破单机内存、CPU 等资源的限制。</p><h4 id="2-7-分布式存储"><a href="#2-7-分布式存储" class="headerlink" title="2.7 分布式存储"></a>2.7 分布式存储</h4><p>在分布式存储应用中，利用一致性哈希算法，可以解决缓存等分布式系统的扩容、缩容导致数据大量搬移的难题。</p><h5 id="2-7-1-一致性哈希算法"><a href="#2-7-1-一致性哈希算法" class="headerlink" title="2.7.1 一致性哈希算法"></a>2.7.1 一致性哈希算法</h5><p>一致性哈希算法是对<code>2^32</code>进行取模运算，是一个固定的值。即<code>0~(2^32)-1</code>的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图：<br><img src="/2022/03/25/data-structure-hashalgorithm/06_01.png"></p><p>一致性哈希要进行的两步哈希：</p><ol><li>对存储节点进行哈希计算，也就是对存储节点做哈希映射，比如根据节点的 IP 地址进行哈希；</li><li>当对数据进行存储或访问时，对数据进行哈希映射；</li><li>所以，<strong>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上</strong>。</li></ol><p>如下图，已经有3个节点经过哈希计算，映射到了哈希环上相应的位置，有三个数据进行哈希映射到节点上；<br>①首先，对 <code>key</code> 进行哈希计算，确定此 <code>key</code> 在环上的位置；<br>②然后，从这个位置沿着顺时针方向走，遇到的第一节点就是存储 <code>key</code> 的节点。<br><img src="/2022/03/25/data-structure-hashalgorithm/06_02.png"></p><p>假设节点数量从 3 增加到了 4，新的节点 D 经过哈希计算后映射到了下图中的位置；<br>可以看到，key-1、key-3 都不受影响，只有 key-2 需要被迁移节点 D。<br><img src="/2022/03/25/data-structure-hashalgorithm/06_03.png"></p><p>假设节点数量从 3 减少到了 2，比如将节点 A 移除；<br>你可以看到，key-2 和 key-3 不会受到影响，只有 key-1 需要被迁移节点 B。<br><img src="/2022/03/25/data-structure-hashalgorithm/06_04.png"></p><p>在一致性哈希算法中，如果增加或者移除一个节点，<strong>仅影响该节点在哈希环上顺时针相邻的后继节点</strong>，其它数据也不会受到影响。</p><h5 id="2-7-2-虚拟节点"><a href="#2-7-2-虚拟节点" class="headerlink" title="2.7.2 虚拟节点"></a>2.7.2 虚拟节点</h5><p><strong>一致性哈希算法虽然减少了数据迁移量，但是并不保证节点能够在哈希环上分布均匀</strong>，这样就会带来一个问题，会有大量的请求集中在一个节点上。在这种情况下进行容灾与扩容时，容易出现雪崩的连锁反应。<br>如下图中 3 个节点的映射位置都在哈希环的右半边：<br><img src="/2022/03/25/data-structure-hashalgorithm/06_05.png"></p><p>要想解决节点能在哈希环上分配不均匀的问题，就是要有大量的节点，节点数越多，哈希环上的节点分布的就越均匀。<br>这个时候我们就加入<strong>虚拟节点</strong>，也就是对一个真实节点做多个副本。<br>具体做法是，不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有<strong>「两层」映射关系</strong>。</p><p>比如对每个节点分别设置 3 个虚拟节点，引入虚拟节点后，原本哈希环上只有 3 个节点的情况，就会变成有 9 个虚拟节点映射到哈希环上，哈希环上的节点数量多了 3 倍。<br>节点数量多了后，节点在哈希环上的分布就相对均匀了。<br><img src="/2022/03/25/data-structure-hashalgorithm/06_06.png"><br>这时候，如果有访问请求寻址到「A-01」这个虚拟节点，接着再通过「A-01」虚拟节点找到真实节点 A，这样请求就能访问到真实节点 A 了。</p><p>虚拟节点除了会提高节点的均衡度，还会提高系统的稳定性。当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高。</p><p>有了虚拟节点后，还可以为硬件配置更好的节点增加权重，比如对权重更高的节点增加更多的虚拟机节点即可。</p><p>因此，<strong>带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景</strong>。</p><h5 id="2-7-3-分布式存储的哈希算法总结"><a href="#2-7-3-分布式存储的哈希算法总结" class="headerlink" title="2.7.3 分布式存储的哈希算法总结"></a>2.7.3 分布式存储的哈希算法总结</h5><p>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。</p><p>但是一致性哈希算法不能够均匀的分布节点，会出现大量请求都集中在一个节点的情况，在这种情况下进行容灾与扩容时，容易出现雪崩的连锁反应。</p><p>为了解决一致性哈希算法不能够均匀的分布节点的问题，就需要引入虚拟节点，对一个真实节点做多个副本。不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</p><p>引入虚拟节点后，可以会提高节点的均衡度，还会提高系统的稳定性。所以，带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈希算法（Hash）又称摘要算法（Digest），它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。&lt;/p&gt;
&lt;p&gt;哈希算法最重要的特点就是：相同的输入一定得到相同的输出；不同的输入大概率得到不同的输出。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」散列表</title>
    <link href="http://chaooo.github.io/2022/03/18/data-structure-hashtable.html"/>
    <id>http://chaooo.github.io/2022/03/18/data-structure-hashtable.html</id>
    <published>2022-03-18T09:46:12.000Z</published>
    <updated>2022-08-01T05:36:15.876Z</updated>
    
    <content type="html"><![CDATA[<p>散列表（<code>Hash Table</code>），也叫“哈希表”或者“Hash表”。是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构。</p><p>通常，我们把这个关键字称为 <code>Key</code>，把对应的记录称为 <code>Value</code>，所以也可以说是通过 <code>Key</code> 访问一个映射表来得到 <code>Value</code> 的地址。而这个映射表，也叫作散列函数或者哈希函数，存放记录的数组叫作散列表。</p><p>散列表用的是<strong>数组支持按照下标随机访问数据</strong>的特性，所以散列表其实就是<strong>数组的一种扩展</strong>，由数组演化而来。</p><span id="more"></span><p><code>Hash</code>，一般翻译做“散列”&#x2F;“哈希”，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。<br>(这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，这种现象叫作碰撞（Collision）。)<br>简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p><p>对散列表中的键(<code>key</code>)进行<code>Hash</code>的函数就是散列函数（<code>Hash(key)</code>）。函数的计算结果就是散列值,就是<code>Hash(key)</code>的值。</p><h3 id="1-几种常见哈希函数："><a href="#1-几种常见哈希函数：" class="headerlink" title="1. 几种常见哈希函数："></a>1. 几种常见哈希函数：</h3><ul><li>直接寻址法：取关键字或关键字的某个线性函数值为散列地址；如<code>Hash(key)=key</code>或者<code>Hash(key)=a*key+b</code>，<code>a</code>和<code>b</code>都为常数。</li><li>数字分析法：如果关键字由多位字符或者数字组成，就可以考虑抽取其中的<code>2</code>位或者多位作为该关键字对应的散列地址，在取法上尽量选择变化较多的位，避免冲突发生。</li><li>平方取中法：对关键字做平方操作，取平方值的中间几位作为散列地址。此方法也是比较常用的构造哈希函数的方法。计算平方之后的中间几位和关键字中的每一位都相关，所以不同的关键字会以较高的概率产生不同的散列地址。</li><li>折叠法：将关键字分割成位数相同的几部分（最后一部分的位数可以不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。此方法适合关键字位数较多的情况。</li><li>取随机数法：使用一个随机函数，取关键字的随机值作为散列地址，这种方式通常用于关键字长度不同的场合。</li><li>除留余数法：若已知整个哈希表的最大长度<code>m</code>，可以取一个不大于<code>m</code>的数<code>p</code>，然后对该关键字<code>key</code>做取余运算，即：<code>Hash(key)=key%p</code>。</li><li>随机数法：取关键字的一个随机函数值作为它的哈希地址，即：<code>Hash(key)=random(key)</code>，此方法适用于关键字长度不等的情况。</li></ul><p>构建哈希函数，需要根据实际的查找表的情况采取适当的方法。通常考虑的因素有以下几方面：</p><ol><li>关键字的长度。如果长度不等，就选用随机数法。如果关键字位数较多，就选用折叠法或者数字分析法；反之如果位数较短，可以考虑平方取中法；</li><li>哈希表的大小。如果大小已知，可以选用除留余数法；</li><li>关键字的分布情况；</li><li>查找表的查找频率；</li><li>计算哈希函数所需的时间（包括硬件指令的因素）</li></ol><h3 id="２-几种哈希冲突的处理方式："><a href="#２-几种哈希冲突的处理方式：" class="headerlink" title="２. 几种哈希冲突的处理方式："></a>２. 几种哈希冲突的处理方式：</h3><ul><li>开放寻址法：<code>Hash(key) = (Hash(key) + d) MOD m</code>；（其中<code>m</code>为哈希表的表长，<code>d</code>为一个增量）。当得出的哈希地址产生冲突时，选取一种探测方法获取<code>d</code>的值，然后继续计算，直到计算出的哈希地址不在冲突为止。三种探测方法：<ul><li>线性探测法：d&#x3D;1，2，3，…，m-1 （每次 +1，向右探测，直到有空闲的位置为止）</li><li>二次探测法：d&#x3D;12，-12，22，-22，32，… （按照 +12，-12，+22，…如此探测，直到有空闲的位置）</li><li>伪随机数探测法：d&#x3D;伪随机数 （每次加上一个随机数，直到探测到空闲位置结束）</li></ul></li><li>再哈希法：当通过哈希函数求得的哈希地址同其他关键字产生冲突时，使用另一个哈希函数计算，直到冲突不再发生。</li><li>链地址法：链地址法其实就是对Key通过哈希之后落在同一个地址上的值，做一个链表。</li><li>建立一个公共溢出区：建立两张表，一张为基本表，另一张为溢出表。基本表存储没有发生冲突的数据，当关键字由哈希函数生成的哈希地址产生冲突时，就将数据填入溢出表。</li></ul><h3 id="３-散列表的特点"><a href="#３-散列表的特点" class="headerlink" title="３. 散列表的特点"></a>３. 散列表的特点</h3><ol><li>访问速度很快<ul><li>由于散列表有散列函数，可以将指定的 Key 都映射到一个地址上，所以在访问一个 Key（键）对应的 Value（值）时，根本不需要一个一个地进行查找，可以直接跳到那个地址。所以我们在对散列表进行添加、删除、修改、查找等任何操作时，速度都很快。</li></ul></li><li>需要额外的空间<ul><li>首先，散列表实际上是存不满的，如果一个散列表刚好能够存满，那么肯定是个巧合。而且当散列表中元素的使用率越来越高时，性能会下降，所以一般会选择扩容来解决这个问题。另外，如果有冲突的话，则也是需要额外的空间去存储的，比如链地址法，不但需要额外的空间，甚至需要使用其他数据结构。</li><li>这个特点有个很常用的词可以表达，叫作“空间换时间”，在大多数时候，对于算法的实现，为了能够有更好的性能，往往会考虑牺牲些空间，让算法能够更快些。</li></ul></li><li>无序<ul><li>散列表还有一个非常明显的特点，那就是无序。为了能够更快地访问元素，散列表是根据散列函数直接找到存储地址的，这样我们的访问速度就能够更快，但是对于有序访问却没有办法应对。</li></ul></li><li>可能会产生碰撞<ul><li>没有完美的散列函数，无论如何总会产生冲突，这时就需要采用冲突解决方案，这也使散列表更加复杂。通常在不同的高级语言的实现中，对于冲突的解决方案不一定一样。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;散列表（&lt;code&gt;Hash Table&lt;/code&gt;），也叫“哈希表”或者“Hash表”。是能够通过给定的关键字的值直接访问到具体对应的值的一个数据结构。&lt;/p&gt;
&lt;p&gt;通常，我们把这个关键字称为 &lt;code&gt;Key&lt;/code&gt;，把对应的记录称为 &lt;code&gt;Value&lt;/code&gt;，所以也可以说是通过 &lt;code&gt;Key&lt;/code&gt; 访问一个映射表来得到 &lt;code&gt;Value&lt;/code&gt; 的地址。而这个映射表，也叫作散列函数或者哈希函数，存放记录的数组叫作散列表。&lt;/p&gt;
&lt;p&gt;散列表用的是&lt;strong&gt;数组支持按照下标随机访问数据&lt;/strong&gt;的特性，所以散列表其实就是&lt;strong&gt;数组的一种扩展&lt;/strong&gt;，由数组演化而来。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」跳表</title>
    <link href="http://chaooo.github.io/2022/03/12/data-structure-skiplist.html"/>
    <id>http://chaooo.github.io/2022/03/12/data-structure-skiplist.html</id>
    <published>2022-03-12T12:08:10.000Z</published>
    <updated>2022-08-01T04:57:28.266Z</updated>
    
    <content type="html"><![CDATA[<p>跳表（SkipList）是一个动态数据结构（链表加多级索引），可以支持快速地插入、删除、查找操作的有序链表。<br>跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。</p><span id="more"></span><h3 id="1-跳表的演化"><a href="#1-跳表的演化" class="headerlink" title="1. 跳表的演化"></a>1. 跳表的演化</h3><p>跳表的原始链表是一个有序单链表，如果要想在其中查找某个数据，只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是 O(n)。<br><img src="/2022/03/12/data-structure-skiplist/04_01.webp"></p><p>从链表中每两个结点提取一个结点到上一级，我们把抽出来的那一级叫做<strong>索引</strong>或<strong>索引层</strong>。如下图。图中的 down 表示 down 指针，指向下一级结点。<br><img src="/2022/03/12/data-structure-skiplist/04_02.webp"></p><p>加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了。<br>跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。查找一个结点需要遍历的结点数量又减少了。<br>这就是跳表的思想，用“空间换时间”，通过给链表建立索引，提高了查找的效率。<br><img src="/2022/03/12/data-structure-skiplist/04_03.webp"></p><p>当元素数量较多时，建立多级索引，索引提高的效率比较大，近似于二分查找。<br><img src="/2022/03/12/data-structure-skiplist/04_04.webp"></p><h3 id="2-跳表查找的时间复杂度"><a href="#2-跳表查找的时间复杂度" class="headerlink" title="2. 跳表查找的时间复杂度"></a>2. 跳表查找的时间复杂度</h3><p>跳表查找元素的过程是从最高级索引开始，一层一层遍历最后下沉到原始链表。所以，<code>时间复杂度 = 索引的高度 * 每层索引遍历元素的个数</code>。</p><p>如果每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是<code>n/2</code>，第二级索引的结点个数大约就是<code>n/4</code>，第三级索引的结点个数大约就是<code>n/8</code>，依次类推，那第<code>k</code>级索引结点的个数就是<code>n/(2^k)</code>。</p><p>最高级索引一般有<code>2</code>个元素，即：最高级索引<code>h</code>满足<code>2=n/(2^h)</code>，从而求得<code>h=log2n-1</code>，如果包含原始链表这一层，整个跳表的高度就是<code>log2n</code>。</p><p>按照前面这种索引结构，我们每一级索引都最多只需要遍历<code>3</code>个结点，根据<code>时间复杂度 = 索引的高度 * 每层索引遍历元素的个数</code>，即跳表中查找一个元素的时间复杂度为<code>O(3*log2n)</code>，省略常数即：<code>O(logn)</code>。</p><h3 id="3-跳表的空间复杂度"><a href="#3-跳表的空间复杂度" class="headerlink" title="3. 跳表的空间复杂度"></a>3. 跳表的空间复杂度</h3><p>跳表通过建立索引，来提高查找元素的效率，就是典型的“空间换时间”的思想，所以在空间上做了一些牺牲。</p><p>前面提到，如果每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是<code>n/2</code>，第二级索引的结点个数大约就是<code>n/4</code>，以此类推，每上升一级就减少一半，直到剩下<code>2</code>个结点。如果我们把每层索引的结点数写出来，就是一个等比数列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n/2, n/4, n/8, ..., 8, 4, 2</span><br></pre></td></tr></table></figure><p>这几级索引的结点总和就是<code>n/2+n/4+n/8…+8+4+2=n-2</code>。所以，跳表的空间复杂度是<code>O(n)</code>。也就是说，如果将包含<code>n</code>个结点的单链表构造成跳表，我们需要额外再用接近<code>n</code>个结点的存储空间。</p><p>我们前面都是每两个结点抽一个结点到上级索引，如果我们每三个结点或五个结点，抽一个结点到上级索引，第一级索引需要大约<code>n/3</code>个结点，第二级索引需要大约<code>n/9</code>个结点，以此类推，每往上一级，索引结点个数都除以<code>3</code>。通过等比数列求和公式，总的索引结点大约就是<code>n/3+n/9+n/27+...+9+3+1=n/2</code>。尽管空间复杂度还是<code>O(n)</code>，但比上面的每两个结点抽一个结点的索引构建方法，要减少了一半的索引结点存储空间。</p><p><strong>在软件工程中，对象数据所占的空间要远大于指针，指针大小可以忽略。</strong></p><h3 id="4-跳表的插入和删除"><a href="#4-跳表的插入和删除" class="headerlink" title="4. 跳表的插入和删除"></a>4. 跳表的插入和删除</h3><p>跳表这个动态数据结构，插入、删除操作的时间复杂度也是<code>O(logn)</code>。</p><h4 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4.1 插入数据"></a>4.1 插入数据</h4><p>跳表的插入首先查找某个数据应该插入的位置（时间复杂度是<code>O(logn)</code>），当我们不停地往跳表中插入数据时，如果我们不更新索引，就有可能出现某 2 个索引结点之间数据非常多的情况。极端情况下，跳表还会退化成单链表。</p><p>需要某种手段来维护索引与原始链表大小之间的平衡。<br>当我们往跳表中插入数据的时候，我们可以选择同时将这个数据插入到部分索引层中。<br>我们通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值 K，那我们就将这个结点添加到第一级到第K级索引中。<br>随机函数简化跳跃链表建立层级索引的复杂度，从概率上来讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。</p><p>如下图所示，插入数据<code>6</code>到跳表中，随机函数生成<code>K=2</code>:<br><img src="/2022/03/12/data-structure-skiplist/04_05.webp"></p><h4 id="4-2-删除数据"><a href="#4-2-删除数据" class="headerlink" title="4.2 删除数据"></a>4.2 删除数据</h4><p>跳表删除数据时，要把索引中对应节点也要删掉。<br>删除元素的过程跟查找元素的过程类似，只不过在查找的路径上如果发现了要删除的元素<code>x</code>，则执行删除操作。</p><p>如下图所示，如果要删除元素<code>9</code>，需要把原始链表中的<code>9</code>和第一级索引的<code>9</code>都删除掉。<br><img src="/2022/03/12/data-structure-skiplist/04_06.webp"></p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>跳表是查询效率近似于二分查找的有序链表；<br>每个元素插入时随机生成它的索引层级level；<br>最底层原始链表包含所有的元素；<br>如果一个元素出现在<code>x</code>层索引，那么它肯定出现在<code>x</code>以下的索引层中；<br>跳表查询、插入、删除的时间复杂度为<code>O(logn)</code>，与平衡二叉树接近；</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跳表（SkipList）是一个动态数据结构（链表加多级索引），可以支持快速地插入、删除、查找操作的有序链表。&lt;br&gt;跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」栈与队列</title>
    <link href="http://chaooo.github.io/2022/03/05/data-structure-stack-queue.html"/>
    <id>http://chaooo.github.io/2022/03/05/data-structure-stack-queue.html</id>
    <published>2022-03-05T07:06:28.000Z</published>
    <updated>2022-07-27T06:03:28.999Z</updated>
    
    <content type="html"><![CDATA[<p>栈（stack）和队列（queue），严格意义上来说，也属于线性表，是一种<strong>操作受限的线性表数据结构</strong>。<br>使用栈结构存储数据，讲究“先进后出”，即最先进栈的数据，最后出栈；<br>使用队列存储数据，讲究“先进先出”，即最先进队列的数据，也最先出队列。</p><span id="more"></span><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h3><p>栈（<code>stack</code>）是一种只能从一端存取数据且遵循“<strong>先进后出</strong>”原则（First In Last Out，简称FILO）的线性存储结构。<br>通常，栈的开口端被称为栈顶；相应地，封口端被称为栈底。<br>栈只支持两个基本操作：<strong>入栈</strong><code>push()</code>和<strong>出栈</strong><code>pop()</code>。</p><h4 id="1-1-栈的实现"><a href="#1-1-栈的实现" class="headerlink" title="1.1 栈的实现"></a>1.1 栈的实现</h4><p>栈既可以用数组来实现，也可以用链表来实现。用数组实现的栈，我们叫作顺序栈，用链表实现的栈，我们叫作链式栈。</p><h4 id="1-2-栈的应用"><a href="#1-2-栈的应用" class="headerlink" title="1.2 栈的应用"></a>1.2 栈的应用</h4><ol><li>栈在函数调用中的应用<ul><li>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将其中的临时变量作为栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</li></ul></li><li>栈在表达式求值中的应用（比如：<code>34+13*9+44-12/3</code>）<ul><li>利用两个栈，其中一个用来保存操作数，另一个用来保存运算符。我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较，若比运算符栈顶元素优先级高，就将当前运算符压入栈，若比运算符栈顶元素的优先级低或者相同，从运算符栈中取出栈顶运算符，从操作数栈顶取出2个操作数，然后进行计算，把计算完的结果压入操作数栈，继续比较。</li></ul></li><li>栈在括号匹配中的应用（比如：<code>&#123;&#125;&#123;[()]()&#125;</code>）<ul><li>用栈保存为匹配的左括号，从左到右一次扫描字符串，当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号，如果能匹配上，则继续扫描剩下的字符串。如果扫描过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。</li><li>当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明未匹配的左括号为非法格式。</li></ul></li><li>实现浏览器的前进后退功能<ul><li>我们使用两个栈<code>X</code>和<code>Y</code>，我们把首次浏览的页面依次压如栈<code>X</code>，当点击后退按钮时，再依次从栈<code>X</code>中出栈，并将出栈的数据一次放入<code>Y</code>栈。当点击前进按钮时，我们依次从栈<code>Y</code>中取出数据，放入栈<code>X</code>中。当栈<code>X</code>中没有数据时，说明没有页面可以继续后退浏览了。当<code>Y</code>栈没有数据，那就说明没有页面可以点击前进浏览了。</li></ul></li></ol><h4 id="1-3-为什么函数调用要用“栈”来保存临时变量？"><a href="#1-3-为什么函数调用要用“栈”来保存临时变量？" class="headerlink" title="1.3 为什么函数调用要用“栈”来保存临时变量？"></a>1.3 为什么函数调用要用“栈”来保存临时变量？</h4><ul><li>因为函数调用的执行顺序符合后进者先出，先进者后出的特点。比如函数中的局部变量的生命周期的长短是先定义的生命周期长，后定义的生命周期短；还有函数中调用函数也是这样，先开始执行的函数只有等到内部调用的其他函数执行完毕，该函数才能执行结束。</li><li>正是由于函数调用的这些特点，根据数据结构是特定应用场景的抽象的原则，我们优先考虑栈结构。</li></ul><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2. 队列"></a>2. 队列</h3><p>队列（<code>queue</code>）是一种遵循“<strong>先进先出</strong>”原则（First In First Out，简称FIFO）的线性存储结构。<br>与栈结构不同的是，队列的两端都“开口”，要求数据只能从一端进，从另一端出；通常，称进数据的一端为“队尾”，出数据的一端为“队头”。<br>最基本的操作也是两个：<strong>入队</strong><code>enqueue()</code>，放一个数据到队列尾部；<strong>出队</strong><code>dequeue()</code>，从队列头部取一个元素。<br>所以，队列跟栈一样，也是一种<strong>操作受限的线性表数据结构</strong>。</p><h4 id="2-1-队列的实现"><a href="#2-1-队列的实现" class="headerlink" title="2.1 队列的实现"></a>2.1 队列的实现</h4><ul><li>队列存储结构的实现有以下两种方式：<ul><li>顺序队列：在顺序表的基础上实现的队列结构。</li><li>链队列：在链表的基础上实现的队列结构。</li></ul></li><li>跟栈一样，队列可以用数组来实现，也可以用链表来实现。用数组实现的队列叫作顺序队列，用链表实现的队列叫作链式队列。</li><li>基于链表的实现方式，可以实现一个支持无限排队的<strong>无界队列</strong>（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</li><li>而基于数组实现的<strong>有界队列</strong>（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。</li></ul><h4 id="2-2-队列的应用"><a href="#2-2-队列的应用" class="headerlink" title="2.2 队列的应用"></a>2.2 队列的应用</h4><ol><li>循环队列<ul><li>循环队列还是基于数组实现的。原本数组是有头有尾的，是一条直线。我们把首尾相连，扳成了一个环，形成逻辑上的环状空间。</li></ul></li><li>阻塞队列<ul><li>在队列的基础上增加阻塞操作，就成了阻塞队列。</li><li>阻塞队列就是在队列为空的时候，从队头取数据会被阻塞，因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后在返回。</li><li>从上面的定义可以看出这就是一个“生产者-消费者模型”。这种基于阻塞队列实现的“生产者-消费者模型”可以有效地协调生产和消费的速度。当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了，这时生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续生产。不仅如此，基于阻塞队列，我们还可以通过协调“生产者”和“消费者”的个数，来提高数据处理效率，比如配置几个消费者，来应对一个生产者。</li></ul></li><li>并发队列<ul><li>在多线程的情况下，会有多个线程同时操作队列，这时就会存在线程安全问题。能够有效解决线程安全问题的队列就称为并发队列。</li><li>并发队列简单的实现就是在enqueue()、dequeue()方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或取操作。</li><li>实际上，基于数组的循环队列利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</li></ul></li><li>线程池资源枯竭是的处理<ul><li>在资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;栈（stack）和队列（queue），严格意义上来说，也属于线性表，是一种&lt;strong&gt;操作受限的线性表数据结构&lt;/strong&gt;。&lt;br&gt;使用栈结构存储数据，讲究“先进后出”，即最先进栈的数据，最后出栈；&lt;br&gt;使用队列存储数据，讲究“先进先出”，即最先进队列的数据，也最先出队列。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」数组与链表</title>
    <link href="http://chaooo.github.io/2022/02/28/data-structure-array-linked-list.html"/>
    <id>http://chaooo.github.io/2022/02/28/data-structure-array-linked-list.html</id>
    <published>2022-02-28T13:05:24.000Z</published>
    <updated>2022-07-27T05:22:09.734Z</updated>
    
    <content type="html"><![CDATA[<p>线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。比如数组，链表、队列、栈等也是线性表结构。<br>而与它相对立的概念是非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p><span id="more"></span><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h3><p>数组（<code>Array</code>）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p><p>数组寻址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i]_address = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><p>以长度为10的int数组（<code>int[] a = new int[10]</code>）为例：分配了一块连续内存空间 <code>1000～1039</code>，其中，内存块的首地址为 <code>base_address = 1000</code>，<code>int</code>类型的<code>data_type_size</code>为<code>4</code>个字节，即<code>a[0]</code>地址为<code>1000</code>，<code>a[1]</code>地址为<code>1004</code>…</p><p><img src="/2022/02/28/data-structure-array-linked-list/array_address.webp"></p><p>容器是否完全替代数组？</p><ul><li>容器的优势：对于Java语言，容器封装了数组插入、删除等操作的细节，并且支持动态扩容。</li><li>对于Java，一些更适合用数组的场景：<ol><li>Java的<code>ArrayList</code>无法存储基本类型，需要进行装箱操作，而装箱与拆箱操作都会有一定的性能消耗，如果特别注意性能，或者希望使用基本类型，就可以选用数组。</li><li>若数组大小事先已知，并且对数组只有非常简单的操作，不需要使用到<code>ArrayList</code>提供的大部分方法，则可以直接使用数组。</li><li>多维数组时，使用数组会更加直观。</li></ol></li></ul><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h3><p>链表（<code>Linked list</code>）也是一种线性表数据结构。它的内存结构是不连续的内存空间，是将一组零散的内存块串联起来，从而进行数据存储。<br>链表中每一个内存块称为节点（<code>Node</code>），节点除了存储数据外，还需存储下一个节点的地址。</p><ol><li>单链表：每个节点只包含一个指针，即后继指针（<code>next</code>）；首节点地址表示整条链表，尾节点的后继指针指向空地址null。</li><li>循环链表：尾节点的后继指针指向首节点，其他与单链表一致。</li><li>双向链表：每个节点包含两个指针，前驱指针（<code>prev</code>）和后继指针（<code>next</code>），首节点的前驱指针和尾节点后继指针都指向空地址null。</li><li>双向循环链表：首节点前驱指针指向尾节点，尾节点后继指针指向首节点，其他与双链表一致。</li></ol><h3 id="3-数组vs链表"><a href="#3-数组vs链表" class="headerlink" title="3. 数组vs链表"></a>3. 数组vs链表</h3><ol><li>数组中的元素存在一个连续的内存空间中，若数组申请空间足够但不连续也会失败；而链表中的元素可以存在于不连续的内存空间，不过需要额外的内存空间存储指针信息。</li><li>数组支持随机访问，根据下标随机访问的时间复杂度是<code>O(1)</code>；链表随机访问的时间复杂度是<code>O(n)</code>。</li><li>链表适合插入、删除操作，时间复杂度为<code>O(1)</code>；数组插入、删除操作，时间复杂度为<code>O(n)</code>。</li><li>数组大小固定，若存储空间不足，需要进行扩容，扩容就需要数据复制，这非常耗时；链表进行频繁的插入删除操作会导致内存频繁的内存申请和释放，容易造成内存碎片，Java环境还可能造成频繁的<code>GC</code>(自动垃圾回收)操作。</li><li>数组在实现上使用连续的内存空间，可以借助CPU的缓冲机制预读数组中的数据，所以访问效率更高，而链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法预读。</li></ol><h3 id="附：双向链表的Java实现"><a href="#附：双向链表的Java实现" class="headerlink" title="附：双向链表的Java实现"></a>附：双向链表的Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头节点指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾节点指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; last;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结点类（私有静态内部类）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素（默认尾部添加）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加为头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> node(index).item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引设置元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;E&gt; x = node(index);</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">        x.item = element;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * e元素链接为尾部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * e元素链接为头部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(<span class="literal">null</span>, e, f);</span><br><span class="line">        first = newNode;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">            last = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f.prev = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消非空节点 x 的链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            x.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x.item = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定索引检查非空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定索引的（非空）节点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。比如数组，链表、队列、栈等也是线性表结构。&lt;br&gt;而与它相对立的概念是非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「数据结构与算法」复杂度分析</title>
    <link href="http://chaooo.github.io/2022/02/26/data-structure-complexity.html"/>
    <id>http://chaooo.github.io/2022/02/26/data-structure-complexity.html</id>
    <published>2022-02-26T10:12:38.000Z</published>
    <updated>2022-07-27T06:04:07.799Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法解决的是：如何让计算机更快时间、更省空间的解决问题。<br>因此需要从执行时间和占用空间两个维度来评估数据结构和算法的性能，二者统称为复杂度。<br>复杂度描述的是算法执行时间或占用系统空间与数据规模的增长关系。</p><span id="more"></span><p>和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</p><h3 id="1-时间复杂度与空间复杂度"><a href="#1-时间复杂度与空间复杂度" class="headerlink" title="1. 时间复杂度与空间复杂度"></a>1. 时间复杂度与空间复杂度</h3><p>大O表示法：所有代码的执行时间<code>T(n)</code>与每行代码的执行次数<code>f(n)</code>成正比，用<code>T(n) = O(f(n))</code>表示，其中<code>n</code>表示数据规模的大小</p><ul><li><code>T(n) = O(f(n))</code>表示<em>算法的执行时间与数据规模之间的增长关系</em>，所以也叫<em>渐进时间复杂度</em>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</li><li>类比一下，S(n)&#x3D;O(f(n))表示<strong>空间复杂度</strong>全称就是<em>渐进空间复杂度</em>（asymptotic space complexity），表示<em>算法的存储空间与数据规模之间的增长关系</em>。</li></ul><h3 id="2-复杂度量级"><a href="#2-复杂度量级" class="headerlink" title="2. 复杂度量级"></a>2. 复杂度量级</h3><ul><li>多项式量级：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。这类有：<ul><li>常量阶<code>O(1)</code></li><li>对数阶<code>O(logn)</code></li><li>线性阶<code>O(n)</code></li><li>线性对数阶<code>O(nlogn)</code></li><li>平方阶<code>O(n^2)</code>、立方阶<code>O(n^3)</code>、···、k次方阶<code>O(n^k)</code></li></ul></li><li>非多项式量级NP（NP：Non-Deterministic Polynomial，非确定多项式）：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。非多项式量级只有两个：指数阶<code>O(2^n)</code> 和 阶乘阶<code>O(n!)</code>。</li></ul><p><img src="/2022/02/26/data-structure-complexity/complexity.png"></p><ul><li>复杂度分析法则<ol><li>单段代码看高频：比如循环。</li><li>多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。</li><li>嵌套代码求乘积：比如递归、多重循环等</li><li>多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。</li></ol></li></ul><h3 id="3-复杂度分析的4个概念"><a href="#3-复杂度分析的4个概念" class="headerlink" title="3.复杂度分析的4个概念"></a>3.复杂度分析的4个概念</h3><p>代码复杂度在不同情况下出现量级差别时，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。大多数情况下，是不需要区别分析它们的。</p><ol><li>最好时间复杂度（best case time complexity）：代码在最理想情况下执行的时间复杂度。</li><li>最坏时间复杂度（worst case time complexity）：代码在最坏情况下执行的时间复杂度。</li><li>平均时间复杂度（average case time complexity）：用代码在所有情况下执行的次数的加权平均值表示。<ul><li>分析：代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。</li></ul></li><li>均摊时间复杂度（amortized time complexity）：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。均摊结果一般都等于低级别复杂度。<ul><li>分析：两个条件满足时使用：①代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；②低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据结构与算法解决的是：如何让计算机更快时间、更省空间的解决问题。&lt;br&gt;因此需要从执行时间和占用空间两个维度来评估数据结构和算法的性能，二者统称为复杂度。&lt;br&gt;复杂度描述的是算法执行时间或占用系统空间与数据规模的增长关系。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://chaooo.github.io/categories/data-structure/"/>
    
    
    <category term="算法" scheme="http://chaooo.github.io/tags/algorithm/"/>
    
    <category term="数据结构" scheme="http://chaooo.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」前后端分离权限控制-指令级权限</title>
    <link href="http://chaooo.github.io/2021/12/30/spring-security-permission.html"/>
    <id>http://chaooo.github.io/2021/12/30/spring-security-permission.html</id>
    <published>2021-12-30T04:28:00.000Z</published>
    <updated>2022-04-17T07:51:08.804Z</updated>
    
    <content type="html"><![CDATA[<p>实现按钮级别的权限控制，基于上一篇<a href="https://my.oschina.net/chaoo/blog/5380267">Spring Secuirty（六）前后端分离菜单权限控制-前端动态路由</a>的扩展。<br>前端部分还是基于<a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a>模板来演示。</p><p>这里实现按钮级别的权限判断的逻辑：每个按钮对应一个<code>权限标识</code>，后台根据用户角色计算出当前用户可访问的<code>权限标识</code>列表，前端登录后得到<code>权限标识</code>列表存入全局，通过单个按钮的<code>权限标识</code>去匹配列表里的。来实现按钮级别的权限判断。<span id="more"></span></p><h3 id="1-数据库添加权限表"><a href="#1-数据库添加权限表" class="headerlink" title="1. 数据库添加权限表"></a>1. 数据库添加权限表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 系统权限表</span></span><br><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `system_permission`;</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `system_permission` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限标识&#x27;</span>,</span><br><span class="line">  `title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 权限&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `system_role_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `system_role_permission` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `permission_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色权限关联表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-前端代码改造"><a href="#2-前端代码改造" class="headerlink" title="2. 前端代码改造"></a>2. 前端代码改造</h3><p>登录后通过接口直接返回用户可访问指令级权限列表：<br><img src="/2021/12/30/spring-security-permission/up-584b8affd5e003dbb50e53f100779ae49c9.webp"></p><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a>模板已经封装了一个通过角色来判断的指令权限：<a href="https://github.com/PanJiaChen/vue-element-admin/tree/master/src/directive/permission">v-permission</a>。</p><p>这里需要修改其逻辑：</p><h4 id="2-1-全局state中添加permissions列表"><a href="#2-1-全局state中添加permissions列表" class="headerlink" title="2.1 全局state中添加permissions列表"></a>2.1 全局<code>state</code>中添加<code>permissions</code>列表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------- state 中添加 permissions</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\store\modules\user.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="comment">// ... other code</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roles</span>: [],</span><br><span class="line">    <span class="attr">menus</span>: [],</span><br><span class="line">    <span class="attr">permissions</span>: [],</span><br><span class="line">    <span class="comment">// ... other code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">SET_PERMISSIONS</span>: <span class="function">(<span class="params">state, permissions</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">permissions</span> = permissions</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ... other code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// ... other code</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// get user info</span></span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params">&#123; commit, state &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getInfo</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">          <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;Verification failed, please Login again.&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> &#123; roles, menus, permissions, id, username, avatar, roleDesc, fullName, phone &#125; = data</span><br><span class="line">          <span class="comment">// roles must be a non-empty array</span></span><br><span class="line">          <span class="keyword">if</span> (!roles || roles.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;getInfo: roles must be a non-null array!&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, roles)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_MENUS&#x27;</span>, menus)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_PERMISSIONS&#x27;</span>, permissions)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_USERID&#x27;</span>, id)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_USERNAME&#x27;</span>, username)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_AVATAR&#x27;</span>, avatar)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLEDESC&#x27;</span>, roleDesc)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_FULLNAME&#x27;</span>, fullName)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_PHONE&#x27;</span>, phone)</span><br><span class="line">          <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user logout</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">&#123; commit, state, dispatch &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ... other code</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------- getters 中添加 permissions</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\store\getters.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">  <span class="attr">permissions</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">permissions</span>,</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure><h4 id="2-2-重写全局v-permission指令逻辑"><a href="#2-2-重写全局v-permission指令逻辑" class="headerlink" title="2.2 重写全局v-permission指令逻辑"></a>2.2 重写全局<code>v-permission</code>指令逻辑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\directive\permission\permission.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPermission</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; value.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> permissions = store.<span class="property">getters</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">permissions</span></span><br><span class="line">    <span class="keyword">const</span> permissionButton = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hasPermission = permissions.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; permissions.<span class="title function_">some</span>(<span class="function"><span class="params">permission</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> permission === permissionButton</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">      el.<span class="property">parentNode</span> &amp;&amp; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`need permissions! Like v-permission=&quot;sys:menu:edit&quot;`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="title function_">checkPermission</span>(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="title function_">checkPermission</span>(el, binding)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-重新checkPermission权限判断函数逻辑"><a href="#2-3-重新checkPermission权限判断函数逻辑" class="headerlink" title="2.3 重新checkPermission权限判断函数逻辑"></a>2.3 重新<code>checkPermission</code>权限判断函数逻辑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\utils\permission.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span> see @/views/permission/directive.vue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">checkPermission</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; value.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> permissions = store.<span class="property">getters</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">permissions</span></span><br><span class="line">    <span class="keyword">const</span> permissionButton = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hasPermission = permissions.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; permissions.<span class="title function_">some</span>(<span class="function"><span class="params">permission</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> permission === permissionButton</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> hasPermission</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`need permissions! Like v-permission=&quot;sys:menu:edit&quot;`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用指令级权限"><a href="#3-使用指令级权限" class="headerlink" title="3. 使用指令级权限"></a>3. 使用指令级权限</h3><p>使用<code>v-permission</code>指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- menu delete permission can see this --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;sys:menu:del&#x27;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- menu edit permission can see this --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;sys:menu:edit&#x27;&quot;</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> permission <span class="keyword">from</span> <span class="string">&#x27;@/directive/permission/index.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123; permission &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>checkPermission</code>函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- menu delete permission can see this --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">v-if</span>=<span class="string">&quot;checkPermission(&#x27;sys:menu:del&#x27;)&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- menu edit permission can see this --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">v-if</span>=<span class="string">&quot;checkPermission(&#x27;sys:menu:edit&#x27;)&quot;</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> checkPermission <span class="keyword">from</span> <span class="string">&#x27;@/utils/permission&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    checkPermission</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-添加按钮权限，与菜单-x2F-按钮对角色授权演示"><a href="#4-添加按钮权限，与菜单-x2F-按钮对角色授权演示" class="headerlink" title="4. 添加按钮权限，与菜单&#x2F;按钮对角色授权演示"></a>4. 添加按钮权限，与菜单&#x2F;按钮对角色授权演示</h3><p>菜单中添加按钮的权限演示<br><img src="/2021/12/30/spring-security-permission/up-3304cdd327e2f4f01862531203ae17bfa62.webp"></p><p>菜单&#x2F;按钮对角色授权演示<br><img src="/2021/12/30/spring-security-permission/up-dde01457a309a26fc04f512830e18e71485.webp"></p><p>完整代码请查看源码：</p><blockquote><p>源码地址：<a href="https://github.com/chaooo/spring-security-jwt.git">https://github.com/chaooo/spring-security-jwt.git</a>,<br>这里我将本文的前后端分离后台菜单权限控制放在github源码tag的V5.0中，防止后续修改后代码对不上。</p></blockquote><h3 id="附：当前实例完整SQL"><a href="#附：当前实例完整SQL" class="headerlink" title="附：当前实例完整SQL"></a>附：当前实例完整SQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 系统用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span> COMMENT <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">  `fullName` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;电话&#x27;</span>,</span><br><span class="line">  `login_flag` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否阻止登录：0否，其他是&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标记：0未删，其他删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;系统用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `role_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标记：0未删，其他删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `role_name` (`role_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统菜单表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_menu`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_menu` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;路由名称(前端匹配路由用)&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;父级菜单Id&#x27;</span>,</span><br><span class="line">  `hidden` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;隐藏状态：0显示，1隐藏&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;状态：0启用，1停用&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;排序&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `del_flag` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标记：0未删，其他删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `name` (`name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;系统菜单表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统权限表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_permission` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限标识&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;系统权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 权限&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_permission` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `permission_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色权限关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_user` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统用户角色关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 菜单&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_menu`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_menu` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色菜单关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始数据</span></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `sys_user`(`id`,`username`,`password`,`create_time`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;sysadmin&#x27;</span>,<span class="string">&#x27;$2a$10$Ml/uEJ5BnUSdKspYM4vkneUHM0piXyAVU0aueWya/v7FBauz6XWE6&#x27;</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `sys_role`(`id`,`role_name`,`role_desc`,`create_time`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu` (`id`, `title`, `name`, `icon`, `parent_id`, `hidden`, `create_time`)</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;系统设置&#x27;</span>,<span class="string">&#x27;SysSetting&#x27;</span>,<span class="string">&#x27;el-icon-s-tools&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;菜单管理&#x27;</span>,<span class="string">&#x27;SysMenus&#x27;</span>,<span class="string">&#x27;el-icon-menu&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;角色管理&#x27;</span>,<span class="string">&#x27;SysRoles&#x27;</span>,<span class="string">&#x27;peoples&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;用户管理&#x27;</span>,<span class="string">&#x27;SysUsers&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;系统图标&#x27;</span>,<span class="string">&#x27;SysIcons&#x27;</span>,<span class="string">&#x27;el-icon-picture&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;菜单列表&#x27;</span>,<span class="string">&#x27;SysMenuList&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;菜单编辑&#x27;</span>,<span class="string">&#x27;SysMenuEdit&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;角色列表&#x27;</span>,<span class="string">&#x27;SysRoleList&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;角色编辑&#x27;</span>,<span class="string">&#x27;SysRoleEdit&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;用户列表&#x27;</span>,<span class="string">&#x27;SysUserList&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;用户编辑&#x27;</span>,<span class="string">&#x27;SysUserEdit&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,NOW()),</span><br><span class="line">        (<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;其他菜单&#x27;</span>,<span class="string">&#x27;Other&#x27;</span>,<span class="string">&#x27;bug&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;0&#x27;</span>,NOW());</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `sys_permission`(`id`,`menu_id`,`name`,`title`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">6</span>,<span class="string">&#x27;sys:menu:edit&#x27;</span>,<span class="string">&#x27;编辑&#x27;</span>),(<span class="number">2</span>,<span class="number">6</span>,<span class="string">&#x27;sys:menu:del&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>),(<span class="number">3</span>,<span class="number">8</span>,<span class="string">&#x27;sys:role:edit&#x27;</span>,<span class="string">&#x27;编辑&#x27;</span>),(<span class="number">4</span>,<span class="number">8</span>,<span class="string">&#x27;sys:role:del&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>),(<span class="number">5</span>,<span class="number">10</span>,<span class="string">&#x27;sys:user:edit&#x27;</span>,<span class="string">&#x27;编辑&#x27;</span>),(<span class="number">6</span>,<span class="number">10</span>,<span class="string">&#x27;sys:user:del&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_role_user`(`user_id`, `role_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_role_menu`(`role_id`, `menu_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>),(<span class="number">1</span>, <span class="number">2</span>),(<span class="number">1</span>, <span class="number">3</span>),(<span class="number">1</span>, <span class="number">4</span>),(<span class="number">1</span>, <span class="number">5</span>),(<span class="number">1</span>, <span class="number">6</span>),(<span class="number">1</span>, <span class="number">7</span>),(<span class="number">1</span>, <span class="number">8</span>),(<span class="number">1</span>, <span class="number">9</span>),(<span class="number">1</span>, <span class="number">10</span>),(<span class="number">1</span>, <span class="number">11</span>),(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `sys_role_permission`(`id`,`role_id`,`permission_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">1</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现按钮级别的权限控制，基于上一篇&lt;a href=&quot;https://my.oschina.net/chaoo/blog/5380267&quot;&gt;Spring Secuirty（六）前后端分离菜单权限控制-前端动态路由&lt;/a&gt;的扩展。&lt;br&gt;前端部分还是基于&lt;a href=&quot;https://panjiachen.github.io/vue-element-admin-site/zh/&quot;&gt;vue-element-admin&lt;/a&gt;模板来演示。&lt;/p&gt;
&lt;p&gt;这里实现按钮级别的权限判断的逻辑：每个按钮对应一个&lt;code&gt;权限标识&lt;/code&gt;，后台根据用户角色计算出当前用户可访问的&lt;code&gt;权限标识&lt;/code&gt;列表，前端登录后得到&lt;code&gt;权限标识&lt;/code&gt;列表存入全局，通过单个按钮的&lt;code&gt;权限标识&lt;/code&gt;去匹配列表里的。来实现按钮级别的权限判断。</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
    <category term="Permissions" scheme="http://chaooo.github.io/tags/Permissions/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」前后端分离菜单权限控制-前端动态路由</title>
    <link href="http://chaooo.github.io/2021/12/27/spring-security-vue.html"/>
    <id>http://chaooo.github.io/2021/12/27/spring-security-vue.html</id>
    <published>2021-12-27T09:35:00.000Z</published>
    <updated>2022-04-17T07:51:17.868Z</updated>
    
    <content type="html"><![CDATA[<p>前端部分，这里基于<a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a>模板来演示，<br><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a>是一个后台前端解决方案，它基于<a href="https://github.com/vuejs/vue">vue</a>和<a href="https://github.com/ElemeFE/element">element-ui</a>实现。<span id="more"></span></p><h3 id="1-安装-vue-element-admin"><a href="#1-安装-vue-element-admin" class="headerlink" title="1. 安装 vue-element-admin"></a>1. 安装 vue-element-admin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/PanJiaChen/vue-element-admin.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> vue-element-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖， 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="2-改造前端路由挂载方式"><a href="#2-改造前端路由挂载方式" class="headerlink" title="2. 改造前端路由挂载方式"></a>2. 改造前端路由挂载方式</h3><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a>中权限的实现方式是：通过获取当前用户的权限去比对路由表，生成当前用户具有的权限可访问的路由表，通过<code>router.addRoutes</code>动态挂载到<code>router</code>上。</p><p>这里改造得更灵活一点，后台根据用户计算出可访问得菜单列表，直接返回用户可访问得菜单列表，前端也需要保存一份全的路由表，用户登录后得到可访问菜单，匹配前端保存的路由表然后动态挂载。</p><p>用户登录成功之后，在全局钩子<code>router.beforeEach</code>中拦截路由，判断是否已获得<code>token</code>，在获得<code>token</code>之后我们就要去获取用户的基本信息及可访问菜单，然后动态挂载路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src/permission.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="comment">// router.beforeEach</span></span><br><span class="line"><span class="keyword">const</span> hasRoles = store.<span class="property">getters</span>.<span class="property">roles</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (hasRoles) &#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// get user info</span></span><br><span class="line">  <span class="keyword">const</span> &#123; menus &#125; = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getInfo&#x27;</span>)</span><br><span class="line">  <span class="comment">// generate accessible routes map based on menus</span></span><br><span class="line">  <span class="keyword">const</span> accessRoutes = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;permission/generateRoutes&#x27;</span>, menus)</span><br><span class="line">  <span class="comment">// dynamically add accessible routes</span></span><br><span class="line">  router.<span class="title function_">addRoutes</span>(accessRoutes)</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-根据接口返回的菜单列表menus动态挂载路由"><a href="#2-1-根据接口返回的菜单列表menus动态挂载路由" class="headerlink" title="2.1 根据接口返回的菜单列表menus动态挂载路由"></a>2.1 根据接口返回的菜单列表<code>menus</code>动态挂载路由</h4><p>接口返回菜单数据：</p><p><img src="/2021/12/27/spring-security-vue/up-44f247866636a16715b39a0ed8941673c89.webp"></p><p>动态挂载路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\store\modules\permission.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes, asyncRoutes, afterRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前路由名称对应的菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus 菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name  路由名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filterMeun</span>(<span class="params">menus, name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; menus.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> menu = menus[i]</span><br><span class="line">      <span class="keyword">if</span> (name === menu.<span class="property">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> menu</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过后台请求的菜单列表递归过滤路由表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> routes asyncRoutes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus  接口返回的菜单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterAsyncRoutes</span>(<span class="params">routes, menus</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;</span><br><span class="line">    <span class="keyword">const</span> meun = <span class="title function_">filterMeun</span>(menus, tmp.<span class="property">name</span>)</span><br><span class="line">    <span class="keyword">if</span> (meun != <span class="literal">null</span> &amp;&amp; meun.<span class="property">title</span>) &#123;</span><br><span class="line">      tmp.<span class="property">hidden</span> = meun.<span class="property">hidden</span> !== <span class="number">0</span></span><br><span class="line">      <span class="comment">// 显示的菜单替换后台设置的标题</span></span><br><span class="line">      <span class="keyword">if</span> (!tmp.<span class="property">hidden</span>) &#123;</span><br><span class="line">        tmp.<span class="property">meta</span>.<span class="property">title</span> = meun.<span class="property">title</span></span><br><span class="line">        tmp.<span class="property">sort</span> = meun.<span class="property">sort</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (meun.<span class="property">icon</span>) &#123;</span><br><span class="line">        tmp.<span class="property">meta</span>.<span class="property">icon</span> = meun.<span class="property">icon</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tmp.<span class="property">children</span>) &#123;</span><br><span class="line">        tmp.<span class="property">children</span> = <span class="title function_">filterAsyncRoutes</span>(tmp.<span class="property">children</span>, menus)</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">push</span>(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对菜单进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortRouters</span>(<span class="params">accessedRouters</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; accessedRouters.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = accessedRouters[i]</span><br><span class="line">    <span class="keyword">if</span> (router.<span class="property">children</span> &amp;&amp; router.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      router.<span class="property">children</span>.<span class="title function_">sort</span>(<span class="title function_">compare</span>(<span class="string">&#x27;sort&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  accessedRouters.<span class="title function_">sort</span>(<span class="title function_">compare</span>(<span class="string">&#x27;sort&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 升序比较函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">m, n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = m[p]</span><br><span class="line">    <span class="keyword">const</span> b = n[p]</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">routes</span>: [],</span><br><span class="line">  <span class="attr">addRoutes</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_ROUTES</span>: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">addRoutes</span> = routes</span><br><span class="line">    state.<span class="property">routes</span> = constantRoutes.<span class="title function_">concat</span>(routes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">generateRoutes</span>(<span class="params">&#123; commit &#125;, menus</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过后台请求的菜单列表递归过滤路由表</span></span><br><span class="line">      <span class="keyword">const</span> roleAsyncRoutes = <span class="title function_">filterAsyncRoutes</span>(asyncRoutes, menus)</span><br><span class="line">      <span class="comment">// 对可访问菜单进行排序</span></span><br><span class="line">      <span class="title function_">sortRouters</span>(roleAsyncRoutes)</span><br><span class="line">      <span class="comment">// 拼接尾部公共菜单</span></span><br><span class="line">      <span class="keyword">const</span> accessedRoutes = roleAsyncRoutes.<span class="title function_">concat</span>(afterRoutes)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">      <span class="title function_">resolve</span>(accessedRoutes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-前端保存的全路径路由表"><a href="#2-2-前端保存的全路径路由表" class="headerlink" title="2.2 前端保存的全路径路由表"></a>2.2 前端保存的全路径路由表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src\router\index.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有权限要求的基本路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/redirect&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/redirect/:path(.*)&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/redirect/index&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/error-page/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;后台首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">affix</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/profile/index&#x27;</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/profile/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;个人中心&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/sys&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/sys/menus&#x27;</span>,</span><br><span class="line">      <span class="attr">alwaysShow</span>: <span class="literal">true</span>, <span class="comment">// will always show the root menu</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;SysSetting&#x27;</span>, <span class="comment">// name必须和后台配置一致，不然匹配不到</span></span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;系统设置&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;el-icon-s-tools&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;menus&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/menus/index&#x27;</span>),</span><br><span class="line">          <span class="attr">redirect</span>: <span class="string">&#x27;/sys/menus/list&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;SysMenus&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;菜单管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;el-icon-menu&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/menus/list.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysMenuList&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;菜单列表&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/menus/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysMenuEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑菜单&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/menus/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysMenuEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加菜单&#x27;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;roles&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/roles/index&#x27;</span>),</span><br><span class="line">          <span class="attr">redirect</span>: <span class="string">&#x27;/sys/roles/list&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;SysRoles&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;lock&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/roles/list.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysRoleList&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;角色列表&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/roles/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysRoleEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑角色&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/roles/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysRoleEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加角色&#x27;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/users/index&#x27;</span>),</span><br><span class="line">          <span class="attr">redirect</span>: <span class="string">&#x27;/sys/users/list&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;SysUsers&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/users/list.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysUserList&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;用户列表&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/users/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysUserEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加用户&#x27;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">              <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/users/form.vue&#x27;</span>),</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;SysUserEdit&#x27;</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑用户&#x27;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;icons&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/sys/icons/index&#x27;</span>),</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;SysIcons&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;系统图标&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;el-icon-picture&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">/** when your routing map is too long, you can split it into small modules **/</span></span><br><span class="line">  <span class="comment">// componentsRouter,</span></span><br><span class="line">  <span class="comment">// chartsRouter,</span></span><br><span class="line">  <span class="comment">// nestedRouter,</span></span><br><span class="line">  <span class="comment">// tableRouter,</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有权限要求的底部基本路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> afterRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;external-link&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;https://www.test.com/&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;友情链接&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;link&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createRouter</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">// mode: &#x27;history&#x27;, // require service support</span></span><br><span class="line">    <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">    <span class="attr">routes</span>: constantRoutes</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newRouter = <span class="title function_">createRouter</span>()</span><br><span class="line">  router.<span class="property">matcher</span> = newRouter.<span class="property">matcher</span> <span class="comment">// reset router</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/chaooo/spring-security-jwt.git">https://github.com/chaooo/spring-security-jwt.git</a>,<br>这里我将本文的前后端分离后台菜单权限控制放在github源码tag的V4.0中，防止后续修改后代码对不上。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端部分，这里基于&lt;a href=&quot;https://panjiachen.github.io/vue-element-admin-site/zh/&quot;&gt;vue-element-admin&lt;/a&gt;模板来演示，&lt;br&gt;&lt;a href=&quot;https://panjiachen.github.io/vue-element-admin-site/zh/&quot;&gt;vue-element-admin&lt;/a&gt;是一个后台前端解决方案，它基于&lt;a href=&quot;https://github.com/vuejs/vue&quot;&gt;vue&lt;/a&gt;和&lt;a href=&quot;https://github.com/ElemeFE/element&quot;&gt;element-ui&lt;/a&gt;实现。</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
    <category term="Vue" scheme="http://chaooo.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」前后端分离后台菜单权限控制</title>
    <link href="http://chaooo.github.io/2021/12/13/spring-security-rbac.html"/>
    <id>http://chaooo.github.io/2021/12/13/spring-security-rbac.html</id>
    <published>2021-12-13T06:35:00.000Z</published>
    <updated>2022-04-17T07:51:23.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-RBAC权限控制模型"><a href="#1-RBAC权限控制模型" class="headerlink" title="1. RBAC权限控制模型"></a>1. RBAC权限控制模型</h3><p>RBAC（Role-based access control）是一种以角色为基础的访问控制（Role-based access control，RBAC），它是一种较新且广为使用的权限控制机制，这种机制不是直接给用户赋予权限，而是将权限赋予角色。</p><p>RBAC 权限模型将用户按角色进行归类，通过用户的角色来确定用户对某项资源是否具备操作权限。RBAC 简化了用户与权限的管理，它将用户与角色关联、角色与权限关联、权限与资源关联，这种模式使得用户的授权管理变得非常简单和易于维护。<span id="more"></span></p><h3 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2. 数据库设计"></a>2. 数据库设计</h3><p><img src="/2021/12/13/spring-security-rbac/up-fbcbfd800689ec7a2a799e6db4b0bbb84e6.webp"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `role_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `role_desc` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 菜单表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_menu`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_menu` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  `menu_name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  `menu_path` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单路径&#x27;</span>,</span><br><span class="line">  `menu_type` <span class="type">char</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单类型(1:一级菜单，2:子菜单，3:按钮)&#x27;</span>,</span><br><span class="line">  `menu_parent_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父级菜单Id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_user` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统用户角色关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 菜单&amp;角色 关联表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_role_menu`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_menu` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8MB4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色菜单关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始数据：</span></span><br><span class="line"><span class="comment">-- 管理员拥有所有菜单权限</span></span><br><span class="line"><span class="comment">-- 普通用户拥有查看权限</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_role`(`id`, `role_name`, `role_desc`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>),(<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu`(`id`, `menu_name`,`menu_path`,`menu_type`,`menu_parent_id`)</span><br><span class="line">    <span class="keyword">VALUES</span>  (<span class="number">1</span>, <span class="string">&#x27;用户管理&#x27;</span>, <span class="string">&#x27;/user&#x27;</span>, <span class="number">1</span>, <span class="keyword">null</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;用户列表&#x27;</span>, <span class="string">&#x27;/user/list&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">3</span>, <span class="string">&#x27;新增用户&#x27;</span>, <span class="string">&#x27;/user/add&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">4</span>, <span class="string">&#x27;修改用户&#x27;</span>, <span class="string">&#x27;/user/update&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">5</span>, <span class="string">&#x27;删除用户&#x27;</span>, <span class="string">&#x27;/user/delete&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_role_user`(`user_id`, `role_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_role_menu`(`role_id`, `menu_id`)</span><br><span class="line">    <span class="keyword">VALUES</span>  (<span class="number">1</span>, <span class="number">1</span>),(<span class="number">1</span>, <span class="number">2</span>),(<span class="number">1</span>, <span class="number">3</span>),(<span class="number">1</span>, <span class="number">4</span>),(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="number">1</span>),(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="3-代码进化"><a href="#3-代码进化" class="headerlink" title="3. 代码进化"></a>3. 代码进化</h3><ol><li>修改注册逻辑，注册时添加用户权限</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResponseJson&lt;SysUser&gt; <span class="title function_">register</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(sysUser.getUsername()) &amp;&amp; StringUtils.hasLength(sysUser.getPassword())) &#123;</span><br><span class="line">        <span class="comment">// 密码加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(sysUser.getPassword());</span><br><span class="line">        sysUser.setPassword(encodePassword);</span><br><span class="line">        <span class="comment">// 新增用户</span></span><br><span class="line">        sysUserDao.insertSysUser(sysUser);</span><br><span class="line">        <span class="comment">// 角色Ids，用&quot;,&quot;隔开</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">roleIds</span> <span class="operator">=</span> sysUser.getRoleIds();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(roleIds)) &#123;</span><br><span class="line">            <span class="comment">// 设置用户角色</span></span><br><span class="line">            String[] split = roleIds.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasLength(s)) &#123;</span><br><span class="line">                    <span class="comment">// 保存用户角色关系</span></span><br><span class="line">                    sysUserDao.insertUserRoleRelation(sysUser.getId(), Long.valueOf(s));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseJson.success(<span class="string">&quot;注册成功&quot;</span>, sysUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseJson.error(<span class="string">&quot;用户名或密码不能为空&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>封装JWT服务工具类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleList 角色列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(String username, List&lt;String&gt; roleList)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        calendar.add(Calendar.MINUTE, ConstantKey.TOKEN_EXPIRE);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(username + <span class="string">&quot;-&quot;</span> + roleList)</span><br><span class="line">                <span class="comment">// 签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                <span class="comment">// 自定义算法与签名：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">// 将token存入redis,并设置超时时间为token过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expire</span> <span class="operator">=</span> time.getTime() - now.getTime();</span><br><span class="line">        redisService.set(token, token, expire);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userinfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(ConstantKey.TOKEN_NAME);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cacheToken</span> <span class="operator">=</span> String.valueOf(redisService.get(token));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(cacheToken) &amp;&amp; !<span class="string">&quot;null&quot;</span>.equals(cacheToken)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                            <span class="comment">// 设置生成token的签名key</span></span><br><span class="line">                            .setSigningKey(ConstantKey.SIGNING_KEY)</span><br><span class="line">                            <span class="comment">// 解析token</span></span><br><span class="line">                            .parseClaimsJws(cacheToken).getBody();</span><br><span class="line">                    <span class="comment">// 取出用户信息</span></span><br><span class="line">                    userinfo = claims.getSubject();</span><br><span class="line">                    <span class="comment">// 重设Redis超时时间</span></span><br><span class="line">                    resetRedisExpire(token, claims);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;Token过期续签，ExpiredJwtException=&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">                    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> e.getClaims();</span><br><span class="line">                    <span class="comment">// 取出用户信息</span></span><br><span class="line">                    userinfo = claims.getSubject();</span><br><span class="line">                    <span class="comment">// 刷新Token</span></span><br><span class="line">                    refreshToken(token, claims);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，UnsupportedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，MalformedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，SignatureException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，IllegalArgumentException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析Token,取出用户名（Token过期仍取出用户名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(ConstantKey.TOKEN_NAME);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userinfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                        <span class="comment">// 设置生成token的签名key</span></span><br><span class="line">                        .setSigningKey(ConstantKey.SIGNING_KEY)</span><br><span class="line">                        <span class="comment">// 解析token</span></span><br><span class="line">                        .parseClaimsJws(token).getBody();</span><br><span class="line">                <span class="comment">// 取出用户信息</span></span><br><span class="line">                userinfo = claims.getSubject();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> e.getClaims();</span><br><span class="line">                <span class="comment">// 取出用户信息</span></span><br><span class="line">                userinfo = claims.getSubject();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(userinfo))&#123;</span><br><span class="line">                username = userinfo.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重设Redis超时时间</span></span><br><span class="line"><span class="comment">     * 当前时间 + (`cacheToken`过期时间 - `cacheToken`签发时间)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetRedisExpire</span><span class="params">(String token, Claims claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// token签发时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">issuedAt</span> <span class="operator">=</span> claims.getIssuedAt().getTime();</span><br><span class="line">        <span class="comment">// token过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration().getTime();</span><br><span class="line">        <span class="comment">// 当前时间 + (`cacheToken`过期时间 - `cacheToken`签发时间)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expireAt</span> <span class="operator">=</span> current + (expiration - issuedAt);</span><br><span class="line">        <span class="comment">// 重设Redis超时时间</span></span><br><span class="line">        redisService.expire(token, expireAt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新Token</span></span><br><span class="line"><span class="comment">     * 刷新Token的时机： 当cacheToken已过期 并且Redis在有效期内</span></span><br><span class="line"><span class="comment">     * 重新生成Token并覆盖Redis的v值(这时候k、v值不一样了)，然后设置Redis过期时间为：新Token过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">(String token, Claims claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 重新生成token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置过期时间: TOKEN_EXPIRE分钟</span></span><br><span class="line">        calendar.add(Calendar.MINUTE, ConstantKey.TOKEN_EXPIRE);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(claims.getSubject())</span><br><span class="line">                <span class="comment">// 签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                <span class="comment">// 算法与签名(同生成token)：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">// 将refreshToken覆盖Redis的v值,并设置超时时间为refreshToken过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expire</span> <span class="operator">=</span> time.getTime() - now.getTime();</span><br><span class="line">        redisService.set(token, token, expire);</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        log.info(<span class="string">&quot;刷新token执行时间: &#123;&#125;&quot;</span>, (System.currentTimeMillis() - current) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写获取用户可访问菜单接口（用户登录后，携带Token去获取用户角色，根据角色计算出用户可访问菜单）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseJson&lt;List&lt;SysMenu&gt;&gt; <span class="title function_">menuList</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtService.getUsername(request);</span><br><span class="line">    <span class="keyword">return</span> sysUserService.menuList(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResponseJson&lt;List&lt;SysMenu&gt;&gt; <span class="title function_">menuList</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasLength(username)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseJson.error(<span class="string">&quot;用户信息异常&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取用户角色Id</span></span><br><span class="line">    List&lt;Long&gt; roleIds = sysUserDao.getRoleIdsByUserId(username);</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(roleIds)) &#123;</span><br><span class="line">        <span class="comment">// 根据角色Id获取菜单列表</span></span><br><span class="line">        menus = sysUserDao.getMenuListByRoleIds(roleIds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseJson.success(menus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRoleIdsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">    SELECT DISTINCT ru.role_id FROM sys_role_user ru</span><br><span class="line">    LEFT JOIN sys_user u ON ru.user_id = u.id</span><br><span class="line">    WHERE u.username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMenuListByRoleIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.jwt.entity.SysMenu&quot;</span>&gt;</span></span><br><span class="line">    SELECT m.id, m.menu_name AS menuName, m.menu_path AS menuPath, m.menu_type AS menuType, m.menu_parent_id AS parentId</span><br><span class="line">    FROM sys_menu m</span><br><span class="line">             LEFT JOIN sys_role_menu rm ON m.id = rm.menu_id</span><br><span class="line">    WHERE rm.role_id IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;roleIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;roleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><ol><li>普通用户可访问菜单：</li></ol><p><img src="/2021/12/13/spring-security-rbac/up-2368413a1b85f66e78676578c3592e42076.webp"></p><ol start="2"><li>管理员可访问菜单：</li></ol><p><img src="/2021/12/13/spring-security-rbac/up-f0af2cb0f3d7a9221a95ddb78fd9f01cfd9.webp"></p><blockquote><p>源码地址：<a href="https://github.com/chaooo/spring-security-jwt.git">https://github.com/chaooo/spring-security-jwt.git</a>,<br>这里我将本文的前后端分离后台菜单权限控制放在github源码tag的V3.0中，防止后续修改后代码对不上。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-RBAC权限控制模型&quot;&gt;&lt;a href=&quot;#1-RBAC权限控制模型&quot; class=&quot;headerlink&quot; title=&quot;1. RBAC权限控制模型&quot;&gt;&lt;/a&gt;1. RBAC权限控制模型&lt;/h3&gt;&lt;p&gt;RBAC（Role-based access control）是一种以角色为基础的访问控制（Role-based access control，RBAC），它是一种较新且广为使用的权限控制机制，这种机制不是直接给用户赋予权限，而是将权限赋予角色。&lt;/p&gt;
&lt;p&gt;RBAC 权限模型将用户按角色进行归类，通过用户的角色来确定用户对某项资源是否具备操作权限。RBAC 简化了用户与权限的管理，它将用户与角色关联、角色与权限关联、权限与资源关联，这种模式使得用户的授权管理变得非常简单和易于维护。</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
    <category term="RBAC" scheme="http://chaooo.github.io/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」基于Redis的Token自动续签优化</title>
    <link href="http://chaooo.github.io/2021/12/10/spring-security-token.html"/>
    <id>http://chaooo.github.io/2021/12/10/spring-security-token.html</id>
    <published>2021-12-10T03:35:00.000Z</published>
    <updated>2022-04-17T07:51:39.442Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于上一篇文章：《Spring Security（三）整合 JWT 实现无状态登录示例》。</p><p>在 <code>SpringSecurity</code> 整合 <code>JWT</code> 实现无状态登录示例中，我们在 <code>JwtAuthenticationFilter</code> (自定义<code>JWT</code>认证过滤器) 解析 <code>Token</code> 成功后，提供了续签逻辑：<span id="more"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 刷新Token的时机：</span></span><br><span class="line"><span class="comment"> * 1. 当前时间 &lt; token过期时间</span></span><br><span class="line"><span class="comment"> * 2. 当前时间 &gt; (签发时间 + (token过期时间 - token签发时间)/2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">(HttpServletResponse response, Claims claims)</span> &#123;</span><br><span class="line">    <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// token签发时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">issuedAt</span> <span class="operator">=</span> claims.getIssuedAt().getTime();</span><br><span class="line">    <span class="comment">// token过期时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration().getTime();</span><br><span class="line">    <span class="comment">// (当前时间 &lt; token过期时间) &amp;&amp; (当前时间 &gt; (签发时间 + (token过期时间 - token签发时间)/2))</span></span><br><span class="line">    <span class="keyword">if</span> ((current &lt; expiration) &amp;&amp; (current &gt; (issuedAt + ((expiration - issuedAt) / <span class="number">2</span>)))) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 重新生成token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置过期时间: 5分钟</span></span><br><span class="line">        calendar.add(Calendar.MINUTE, <span class="number">5</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(claims.getSubject())</span><br><span class="line">                <span class="comment">// 签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                <span class="comment">// 算法与签名(同生成token)：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">// 主动刷新token，并返回给前端</span></span><br><span class="line">        response.addHeader(<span class="string">&quot;refreshToken&quot;</span>, refreshToken);</span><br><span class="line">        log.info(<span class="string">&quot;刷新token执行时间: &#123;&#125;&quot;</span>, (System.currentTimeMillis() - current) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是：<code>Token</code> 未过期并且当前时间已经超过 <code>Token</code> 有效时间的一半，重新生成一个 <code>refreshToken</code>，并返回给前端，前端需要用 <code>refreshToken</code> 替换之前旧的 <code>Token</code>。</p><h3 id="Token续签优化方案"><a href="#Token续签优化方案" class="headerlink" title="Token续签优化方案"></a>Token续签优化方案</h3><p>预期效果：前端不需要手动替换 <code>Token</code>，每次用 <code>Token</code> 请求资源时自动续期。</p><p>实现方案：引入 <code>Redis</code>，实现逻辑：</p><ol><li>登录成功后将 <code>Token</code> 存储到 <code>Redis</code> 里面(k,v都为 <code>Token</code> 的值)，并设置 <code>Redis</code> 过期时间为： <code>Token</code> 过期时间。</li><li>用户发起请求时，每次都根据k为<code>Token</code>的键去换取 <code>Redis</code> 的值，这里命名为 <code>cacheToken</code>：<ul><li>当 <code>cacheToken</code> 在有效期内，重设 <code>Redis</code> 过期时间为：当前时间 + (<code>cacheToken</code>过期时间 - <code>cacheToken</code>签发时间)。</li><li>当 <code>cacheToken</code> 已过期（<code>Redis</code> 在有效期内），则 <code>JWT</code> 重新生成 <code>Token</code> 并覆盖v值(这时候k、v值不一样了)，然后设置 <code>Redis</code> 过期时间为： <code>cacheToken</code> 过期时间。</li><li>若 <code>Redis</code> 也过期，取不到 <code>cacheToken</code>，则拒绝访问或返回错误信息，需要重新登录。</li></ul></li></ol><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><h5 id="1-在-pom-xml-中引入-Redis-依赖："><a href="#1-在-pom-xml-中引入-Redis-依赖：" class="headerlink" title="1. 在 pom.xml 中引入 Redis 依赖："></a>1. 在 <code>pom.xml</code> 中引入 <code>Redis</code> 依赖：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-在-application-yml-配置文件中配置-Redis："><a href="#2-在-application-yml-配置文件中配置-Redis：" class="headerlink" title="2. 在 application.yml 配置文件中配置 Redis："></a>2. 在 <code>application.yml</code> 配置文件中配置 <code>Redis</code>：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456</span><br><span class="line">    # Redis数据库索引（默认为0）</span><br><span class="line">    database: 0</span><br><span class="line">    # 连接超时时间（毫秒）</span><br><span class="line">    timeout: 5000</span><br></pre></td></tr></table></figure><h5 id="3-简单的-RedisService-封装"><a href="#3-简单的-RedisService-封装" class="headerlink" title="3. 简单的 RedisService 封装"></a>3. 简单的 <code>RedisService</code> 封装</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Serializable, Object&gt; redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operations.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.hasLength(key) &amp;&amp; Boolean.TRUE.equals(redisTemplate.hasKey(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存 并 加上过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, Date date)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expireAt(key, date);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入过期时间（毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, Long expireTimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.expire(key, expireTimeMillis, TimeUnit.MILLISECONDS);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-修改JWT登录过滤器-JwtLoginFilter，构造方法中加入-RedisService，并生成-Token-后存入-Redis"><a href="#4-修改JWT登录过滤器-JwtLoginFilter，构造方法中加入-RedisService，并生成-Token-后存入-Redis" class="headerlink" title="4. 修改JWT登录过滤器 JwtLoginFilter，构造方法中加入 RedisService，并生成 Token 后存入 Redis:"></a>4. 修改JWT登录过滤器 <code>JwtLoginFilter</code>，构造方法中加入 <code>RedisService</code>，并生成 <code>Token</code> 后存入 <code>Redis</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisService redisService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtLoginFilter</span><span class="params">(AuthenticationManager authenticationManager, RedisService redisService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="built_in">this</span>.redisService = redisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试身份认证(接收并解析用户凭证)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> authenticationManager.authenticate(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证成功(用户成功登录后，这个方法会被调用，我们在这个方法里生成token)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication auth)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = auth.getAuthorities();</span><br><span class="line">            <span class="comment">// 定义存放角色集合的对象</span></span><br><span class="line">            List&lt;String&gt; roleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorities) &#123;</span><br><span class="line">                roleList.add(grantedAuthority.getAuthority());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 生成token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            <span class="comment">// 设置签发时间</span></span><br><span class="line">            calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="comment">// 设置过期时间: 5分钟</span></span><br><span class="line">            calendar.add(Calendar.MINUTE, <span class="number">5</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                    .setSubject(auth.getName() + <span class="string">&quot;-&quot;</span> + roleList)</span><br><span class="line">                    <span class="comment">// 签发时间</span></span><br><span class="line">                    .setIssuedAt(now)</span><br><span class="line">                    <span class="comment">// 过期时间</span></span><br><span class="line">                    .setExpiration(time)</span><br><span class="line">                    <span class="comment">// 自定义算法与签名：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                    .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                    .compact();</span><br><span class="line">            <span class="comment">// 将token存入redis,并设置超时时间为token过期时间</span></span><br><span class="line">            redisService.set(token, token, time);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 返回token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            log.info(<span class="string">&quot;用户登录成功，生成token=&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="comment">// 登录成功后，返回token到header里面</span></span><br><span class="line">            response.addHeader(<span class="string">&quot;Authorization&quot;</span>, token);</span><br><span class="line">            <span class="comment">// 登录成功后，返回token到body里面</span></span><br><span class="line">            ResponseJson&lt;String&gt; result = ResponseJson.success(<span class="string">&quot;登录成功&quot;</span>, token);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;IOException:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证失败调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;登录失败[&#123;&#125;]，AuthenticationException=&#123;&#125;&quot;</span>, request.getRequestURI(), exception.getMessage());</span><br><span class="line">        <span class="comment">// 登录失败，返回错误信息</span></span><br><span class="line">        ResponseJson&lt;Void&gt; result = ResponseJson.error(exception.getMessage(), <span class="literal">null</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-修改JWT认证过滤器-JwtAuthenticationFilter，构造方法中加入-RedisService，并添加-Token-续签逻辑"><a href="#5-修改JWT认证过滤器-JwtAuthenticationFilter，构造方法中加入-RedisService，并添加-Token-续签逻辑" class="headerlink" title="5. 修改JWT认证过滤器 JwtAuthenticationFilter，构造方法中加入 RedisService，并添加 Token 续签逻辑:"></a>5. 修改JWT认证过滤器 <code>JwtAuthenticationFilter</code>，构造方法中加入 <code>RedisService</code>，并添加 <code>Token</code> 续签逻辑:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisService redisService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager, RedisService redisService)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authenticationManager);</span><br><span class="line">        <span class="built_in">this</span>.redisService = redisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> getAuthentication(request, response);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title function_">getAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 解析token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cacheToken</span> <span class="operator">=</span> String.valueOf(redisService.get(token));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(token) &amp;&amp; !<span class="string">&quot;null&quot;</span>.equals(cacheToken)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                            <span class="comment">// 设置生成token的签名key</span></span><br><span class="line">                            .setSigningKey(ConstantKey.SIGNING_KEY)</span><br><span class="line">                            <span class="comment">// 解析token</span></span><br><span class="line">                            .parseClaimsJws(cacheToken).getBody();</span><br><span class="line">                    <span class="comment">// 取出用户信息</span></span><br><span class="line">                    user = claims.getSubject();</span><br><span class="line">                    <span class="comment">// 重设Redis超时时间</span></span><br><span class="line">                    resetRedisExpire(token, claims);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;Token过期续签，ExpiredJwtException=&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">                    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> e.getClaims();</span><br><span class="line">                    <span class="comment">// 取出用户信息</span></span><br><span class="line">                    user = claims.getSubject();</span><br><span class="line">                    <span class="comment">// 刷新Token</span></span><br><span class="line">                    refreshToken(token, claims);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，UnsupportedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，MalformedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，SignatureException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，IllegalArgumentException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取用户权限和角色</span></span><br><span class="line">                    String[] split = user.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    ArrayList&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">                        authorities.add(<span class="keyword">new</span> <span class="title class_">GrantedAuthorityImpl</span>(s));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 返回Authentication</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user, <span class="literal">null</span>, authorities);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，需要身份认证&quot;</span>, request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重设Redis超时时间</span></span><br><span class="line"><span class="comment">     * 当前时间 + (`cacheToken`过期时间 - `cacheToken`签发时间)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetRedisExpire</span><span class="params">(String token, Claims claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// token签发时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">issuedAt</span> <span class="operator">=</span> claims.getIssuedAt().getTime();</span><br><span class="line">        <span class="comment">// token过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration().getTime();</span><br><span class="line">        <span class="comment">// 当前时间 + (`cacheToken`过期时间 - `cacheToken`签发时间)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expireAt</span> <span class="operator">=</span> current + (expiration - issuedAt);</span><br><span class="line">        <span class="comment">// 重设Redis超时时间</span></span><br><span class="line">        redisService.expire(token, expireAt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新Token</span></span><br><span class="line"><span class="comment">     * 刷新Token的时机： 当cacheToken已过期 并且Redis在有效期内</span></span><br><span class="line"><span class="comment">     * 重新生成Token并覆盖Redis的v值(这时候k、v值不一样了)，然后设置Redis过期时间为：新Token过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">(String token, Claims claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 重新生成token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置过期时间: 5分钟</span></span><br><span class="line">        calendar.add(Calendar.MINUTE, <span class="number">5</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(claims.getSubject())</span><br><span class="line">                <span class="comment">// 签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                <span class="comment">// 算法与签名(同生成token)：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">// 将refreshToken覆盖Redis的v值,并设置超时时间为refreshToken过期时间</span></span><br><span class="line">        redisService.set(token, refreshToken, time);</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        log.info(<span class="string">&quot;刷新token执行时间: &#123;&#125;&quot;</span>, (System.currentTimeMillis() - current) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-修改-SpringSecurity-配置类，注入-RedisService："><a href="#6-修改-SpringSecurity-配置类，注入-RedisService：" class="headerlink" title="6. 修改 SpringSecurity 配置类，注入 RedisService："></a>6. 修改 <code>SpringSecurity</code> 配置类，注入 <code>RedisService</code>：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局请求忽略规则配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要放行的URL</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/register&quot;</span>, <span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义认证策略：登录的时候会进入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 通过实现 AuthenticationProvider 自定义身份认证验证组件</span></span><br><span class="line">        auth.authenticationProvider(<span class="keyword">new</span> <span class="title class_">AuthenticationProviderImpl</span>(userDetailsService, bCryptPasswordEncoder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 HTTP 验证规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            <span class="comment">// 关闭Session</span></span><br><span class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            <span class="comment">// 所有请求需要身份认证</span></span><br><span class="line">            .and().authorizeRequests().anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">// 自定义JWT登录过滤器</span></span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">JwtLoginFilter</span>(authenticationManager(), redisService))</span><br><span class="line">            <span class="comment">// 自定义JWT认证过滤器</span></span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(authenticationManager(), redisService))</span><br><span class="line">            <span class="comment">// 自定义认证拦截器，也可以直接使用内置实现类Http403ForbiddenEntryPoint</span></span><br><span class="line">            .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">AuthenticationEntryPointImpl</span>())</span><br><span class="line">            <span class="comment">// 允许跨域</span></span><br><span class="line">            .and().cors()</span><br><span class="line">            <span class="comment">// 禁用跨站伪造</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/chaooo/spring-security-jwt.git">https://github.com/chaooo/spring-security-jwt.git</a>,<br>这里我将本文的基于Redis的Token自动续签优化放在github源码tag的V2.0中，防止后续修改后代码对不上。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基于上一篇文章：《Spring Security（三）整合 JWT 实现无状态登录示例》。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;SpringSecurity&lt;/code&gt; 整合 &lt;code&gt;JWT&lt;/code&gt; 实现无状态登录示例中，我们在 &lt;code&gt;JwtAuthenticationFilter&lt;/code&gt; (自定义&lt;code&gt;JWT&lt;/code&gt;认证过滤器) 解析 &lt;code&gt;Token&lt;/code&gt; 成功后，提供了续签逻辑：</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
    <category term="Token" scheme="http://chaooo.github.io/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」整合 JWT 实现无状态登录示例</title>
    <link href="http://chaooo.github.io/2021/12/09/spring-security-jwt.html"/>
    <id>http://chaooo.github.io/2021/12/09/spring-security-jwt.html</id>
    <published>2021-12-09T08:35:00.000Z</published>
    <updated>2022-04-17T07:53:38.627Z</updated>
    
    <content type="html"><![CDATA[<p>JSON Web Token（缩写 JWT）基于JSON格式信息一种Token令牌，是目前最流行的跨域认证解决方案。</p><span id="more"></span><ul><li>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户。</li><li>此后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</li><li>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</li></ul><h3 id="1-依赖与配置文件"><a href="#1-依赖与配置文件" class="headerlink" title="1. 依赖与配置文件"></a>1. 依赖与配置文件</h3><ol><li>在 <code>pom.xml</code> 中引入依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>用户信息从数据库中获取，在 <code>application.yml</code> 配置文件中配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://192.168.2.100:3306/security?characterEncoding=UTF8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">    username: developer</span><br><span class="line">    password: 05bZ/OxTB:X+yd%1</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><h3 id="2-自定义Security策略"><a href="#2-自定义Security策略" class="headerlink" title="2. 自定义Security策略"></a>2. 自定义Security策略</h3><h4 id="2-1-通过继承-WebSecurityConfigurerAdapter-实现自定义Security策略"><a href="#2-1-通过继承-WebSecurityConfigurerAdapter-实现自定义Security策略" class="headerlink" title="2.1 通过继承 WebSecurityConfigurerAdapter 实现自定义Security策略"></a>2.1 通过继承 WebSecurityConfigurerAdapter 实现自定义Security策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 通过继承 WebSecurityConfigurerAdapter 实现自定义Security策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：声明当前类是一个配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableWebSecurity</span>：开启WebSecurity模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableGlobalMethodSecurity</span>(securedEnabled=true)：开启注解，支持方法级别的权限控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局请求忽略规则配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要放行的URL</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/register&quot;</span>, <span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义认证策略：登录的时候会进入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.通过实现 AuthenticationProvider 自定义身份认证验证组件</span></span><br><span class="line">        auth.authenticationProvider(<span class="keyword">new</span> <span class="title class_">AuthenticationProviderImpl</span>(userDetailsService, bCryptPasswordEncoder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTTP 验证规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            <span class="comment">// 关闭Session</span></span><br><span class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            <span class="comment">// 所有请求需要身份认证</span></span><br><span class="line">            .and().authorizeRequests().anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">// 3.自定义JWT登录过滤器</span></span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">JwtLoginFilter</span>(authenticationManager()))</span><br><span class="line">            <span class="comment">// 4.自定义JWT认证过滤器</span></span><br><span class="line">            .addFilter(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(authenticationManager()))</span><br><span class="line">            <span class="comment">// 5.自定义认证拦截器，也可以直接使用内置实现类Http403ForbiddenEntryPoint</span></span><br><span class="line">            .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">AuthenticationEntryPointImpl</span>())</span><br><span class="line">            <span class="comment">// 允许跨域</span></span><br><span class="line">            .and().cors()</span><br><span class="line">            <span class="comment">// 禁用跨站伪造</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BCryptPasswordEncoder</code> 解析器注入到容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>UserDetailsService</code> 接口，自定义逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao sysUserDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 数据库中查找用户</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> sysUserDao.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户&quot;</span> + username + <span class="string">&quot;不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), user.getPassword(), emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-通过实现-AuthenticationProvider-自定义身份认证验证组件"><a href="#2-2-通过实现-AuthenticationProvider-自定义身份认证验证组件" class="headerlink" title="2.2 通过实现 AuthenticationProvider 自定义身份认证验证组件"></a>2.2 通过实现 AuthenticationProvider 自定义身份认证验证组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationProviderImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthenticationProviderImpl</span><span class="params">(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">        <span class="built_in">this</span>.bCryptPasswordEncoder = bCryptPasswordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来验证用户身份 （对传递的Authentication对象的身份验证）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 传递的Authentication对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含凭证的经过完全认证的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException 份验证失败异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 获取认证的用户名 &amp; 密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line">        <span class="comment">// 认证逻辑</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(name);</span><br><span class="line">        <span class="keyword">if</span> (bCryptPasswordEncoder.matches(password, userDetails.getPassword())) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户登录成功，username=&#123;&#125;&quot;</span>, name);</span><br><span class="line">            <span class="comment">// 这里设置权限和角色</span></span><br><span class="line">            ArrayList&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            authorities.add( <span class="keyword">new</span> <span class="title class_">GrantedAuthorityImpl</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">            authorities.add( <span class="keyword">new</span> <span class="title class_">GrantedAuthorityImpl</span>(<span class="string">&quot;AUTH_WRITE&quot;</span>));</span><br><span class="line">            <span class="comment">// 生成令牌 这里令牌里面存入了:name,password,authorities, 当然你也可以放其他内容</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(name, password, authorities);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前的AuthenticationProvider 是否支持对应的Authentication对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication Authentication对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>GrantedAuthority</code> 存储权限和角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限类型，负责存储权限和角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GrantedAuthorityImpl</span> <span class="keyword">implements</span> <span class="title class_">GrantedAuthority</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String authority;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GrantedAuthorityImpl</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authority = authority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthority</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authority = authority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthority</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-自定义JWT登录过滤器，继承-UsernamePasswordAuthenticationFilter"><a href="#2-3-自定义JWT登录过滤器，继承-UsernamePasswordAuthenticationFilter" class="headerlink" title="2.3 自定义JWT登录过滤器，继承 UsernamePasswordAuthenticationFilter"></a>2.3 自定义JWT登录过滤器，继承 UsernamePasswordAuthenticationFilter</h4><p>重写了其中的3个方法</p><ul><li><code>attemptAuthentication</code>：接收并解析用户凭证。</li><li><code>successfulAuthentication</code>：用户成功登录后被调用，我们在这个方法里生成token。</li><li><code>unsuccessfulAuthentication</code>：认证失败后被调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtLoginFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试身份认证(接收并解析用户凭证)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> authenticationManager.authenticate(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证成功(用户成功登录后，这个方法会被调用，我们在这个方法里生成token)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication auth)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = auth.getAuthorities();</span><br><span class="line">            <span class="comment">// 定义存放角色集合的对象</span></span><br><span class="line">            List&lt;String&gt; roleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorities) &#123;</span><br><span class="line">                roleList.add(grantedAuthority.getAuthority());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 生成token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            <span class="comment">// 设置签发时间</span></span><br><span class="line">            calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="comment">// 设置过期时间: 5分钟</span></span><br><span class="line">            calendar.add(Calendar.MINUTE, <span class="number">5</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                    .setSubject(auth.getName() + <span class="string">&quot;-&quot;</span> + roleList)</span><br><span class="line">                    <span class="comment">// 签发时间</span></span><br><span class="line">                    .setIssuedAt(now)</span><br><span class="line">                    <span class="comment">// 过期时间</span></span><br><span class="line">                    .setExpiration(time)</span><br><span class="line">                    <span class="comment">// 自定义算法与签名：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                    .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                    .compact();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 返回token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            log.info(<span class="string">&quot;用户登录成功，生成token=&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="comment">// 登录成功后，返回token到header里面</span></span><br><span class="line">            response.addHeader(<span class="string">&quot;Authorization&quot;</span>, token);</span><br><span class="line">            <span class="comment">// 登录成功后，返回token到body里面</span></span><br><span class="line">            ResponseJson&lt;String&gt; result = ResponseJson.success(token);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;IOException:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证失败调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;登录失败[&#123;&#125;]，AuthenticationException=&#123;&#125;&quot;</span>, request.getRequestURI(), exception.getMessage());</span><br><span class="line">        <span class="comment">// 登录失败，返回错误信息</span></span><br><span class="line">        ResponseJson&lt;Void&gt; result = ResponseJson.error(exception.getMessage(), <span class="literal">null</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义加密的签名<code>key</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义签名key常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantKey</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGNING_KEY</span> <span class="operator">=</span> <span class="string">&quot;Charles@Jwt!&amp;Secret^#&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义全局API返回JSON数据对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseJson</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/** 自定义状态码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">/** 提示信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/** 返回数据 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResponseJson</span><span class="params">(<span class="type">int</span> code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseJson&lt;Void&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResponseJson&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResponseJson&lt;T&gt; <span class="title function_">success</span><span class="params">(String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(<span class="number">0</span>, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResponseJson&lt;T&gt; <span class="title function_">success</span><span class="params">(<span class="type">int</span> code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(code, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseJson&lt;Void&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(-<span class="number">1</span>, <span class="string">&quot;操作失败&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseJson&lt;Void&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(-<span class="number">1</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseJson&lt;Void&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResponseJson&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(-<span class="number">1</span>, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResponseJson&lt;T&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseJson</span>&lt;&gt;(code, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ResponseJson&#123;&quot;</span> + <span class="string">&quot;code=&quot;</span> + code + <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, data=&quot;</span> + data + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-自定义JWT认证过滤器，继承-BasicAuthenticationFilter，重写doFilterInternal方法"><a href="#2-4-自定义JWT认证过滤器，继承-BasicAuthenticationFilter，重写doFilterInternal方法" class="headerlink" title="2.4 自定义JWT认证过滤器，继承 BasicAuthenticationFilter，重写doFilterInternal方法"></a>2.4 自定义JWT认证过滤器，继承 BasicAuthenticationFilter，重写doFilterInternal方法</h4><p>从http头的Authorization 项读取token数据，然后用Jwts包提供的方法校验token的合法性。如果校验通过，就认为这是一个取得授权的合法请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> getAuthentication(request, response);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title function_">getAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 解析token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                        <span class="comment">// 设置生成token的签名key</span></span><br><span class="line">                        .setSigningKey(ConstantKey.SIGNING_KEY)</span><br><span class="line">                        <span class="comment">// 解析token</span></span><br><span class="line">                        .parseClaimsJws(token).getBody();</span><br><span class="line">                <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">                <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                    String[] split = user.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    ArrayList&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">                        authorities.add(<span class="keyword">new</span> <span class="title class_">GrantedAuthorityImpl</span>(s));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 刷新Token</span></span><br><span class="line">                    refreshToken(response, claims);</span><br><span class="line">                    <span class="comment">// 返回Authentication</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user, <span class="literal">null</span>, authorities);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，ExpiredJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，UnsupportedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，MalformedJwtException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，SignatureException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，IllegalArgumentException=&#123;&#125;&quot;</span>, request.getRequestURI(), e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.warn(<span class="string">&quot;访问[&#123;&#125;]失败，需要身份认证&quot;</span>, request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新Token</span></span><br><span class="line"><span class="comment">     * 刷新Token的时机：</span></span><br><span class="line"><span class="comment">     * 1. 当前时间 &lt; token过期时间</span></span><br><span class="line"><span class="comment">     * 2. 当前时间 &gt; (签发时间 + (token过期时间 - token签发时间)/2)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">(HttpServletResponse response, Claims claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// token签发时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">issuedAt</span> <span class="operator">=</span> claims.getIssuedAt().getTime();</span><br><span class="line">        <span class="comment">// token过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> claims.getExpiration().getTime();</span><br><span class="line">        <span class="comment">// (当前时间 &lt; token过期时间) &amp;&amp; (当前时间 &gt; (签发时间 + (token过期时间 - token签发时间)/2))</span></span><br><span class="line">        <span class="keyword">if</span> ((current &lt; expiration) &amp;&amp; (current &gt; (issuedAt + ((expiration - issuedAt) / <span class="number">2</span>)))) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 重新生成token</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            <span class="comment">// 设置签发时间</span></span><br><span class="line">            calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="comment">// 设置过期时间: 5分钟</span></span><br><span class="line">            calendar.add(Calendar.MINUTE, <span class="number">5</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                    .setSubject(claims.getSubject())</span><br><span class="line">                    <span class="comment">// 签发时间</span></span><br><span class="line">                    .setIssuedAt(now)</span><br><span class="line">                    <span class="comment">// 过期时间</span></span><br><span class="line">                    .setExpiration(time)</span><br><span class="line">                    <span class="comment">// 算法与签名(同生成token)：这里算法采用HS512，常量中定义签名key</span></span><br><span class="line">                    .signWith(SignatureAlgorithm.HS512, ConstantKey.SIGNING_KEY)</span><br><span class="line">                    .compact();</span><br><span class="line">            <span class="comment">// 主动刷新token，并返回给前端</span></span><br><span class="line">            response.addHeader(<span class="string">&quot;refreshToken&quot;</span>, refreshToken);</span><br><span class="line">            log.info(<span class="string">&quot;刷新token执行时间: &#123;&#125;&quot;</span>, (System.currentTimeMillis() - current) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-通过实现-AuthenticationEntryPoint-自定义认证拦截器"><a href="#2-5-通过实现-AuthenticationEntryPoint-自定义认证拦截器" class="headerlink" title="2.5 通过实现 AuthenticationEntryPoint 自定义认证拦截器"></a>2.5 通过实现 <code>AuthenticationEntryPoint</code> 自定义认证拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthenticationEntryPointImpl</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 遇到了认证异常authException用户请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 将要返回给客户的相应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;预认证入口被调用。拒绝访问，AuthenticationException=&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        <span class="comment">// 没有权限，返回403</span></span><br><span class="line">        response.sendError(<span class="number">403</span>, <span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-示例DEMO"><a href="#3-示例DEMO" class="headerlink" title="3. 示例DEMO"></a>3. 示例DEMO</h3><p>sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;系统用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserApi</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseJson&lt;SysUser&gt; <span class="title function_">register</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.register(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseJson&lt;Void&gt; <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseJson.success(<span class="string">&quot;访问成功！公开接口：/hello&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/private&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseJson&lt;Void&gt; <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseJson.success(<span class="string">&quot;访问成功！非公开接口：/private&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao sysUserDao;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="keyword">public</span> ResponseJson&lt;SysUser&gt; <span class="title function_">register</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sysUser.getUsername()) || StringUtils.isEmpty(sysUser.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseJson.error(<span class="string">&quot;用户名或密码不能为空&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(sysUser.getPassword());</span><br><span class="line">        sysUser.setPassword(encodePassword);</span><br><span class="line">        sysUserDao.insertSysUser(sysUser);</span><br><span class="line">        <span class="keyword">return</span> ResponseJson.success(<span class="string">&quot;注册成功&quot;</span>, sysUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DAO层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserDao</span> &#123;</span><br><span class="line">    SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertSysUser</span><span class="params">(SysUser sysUser)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertSysUser&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">INSERT INTO sys_user(username, password) VALUES(#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.jwt.entity.SysUser&quot;</span>&gt;</span></span><br><span class="line">SELECT id,username,PASSWORD FROM sys_user WHERE username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>注册一个用户：</p><p><img src="/2021/12/09/spring-security-jwt/up-370de8ce7710b876dfd137c959fa7eee380.webp"></p><p>登录，返回Token：</p><p><img src="/2021/12/09/spring-security-jwt/up-1fef936e1e165efa73d6b133eba887c9d6d.webp"></p><p>访问公开接口：</p><p><img src="/2021/12/09/spring-security-jwt/up-f342a930a199bcca09e0866b790c3a6a2db.webp"></p><p>访问需要认证的接口，无权限返回403：</p><p><img src="/2021/12/09/spring-security-jwt/up-13ffbcfb34a1c5d879d1e2b2a0c883fb204.webp"></p><p>访问需要认证的接口，通过有效Token访问：</p><p><img src="/2021/12/09/spring-security-jwt/up-c5efb32d07d1bd147f8c3dae689cde5eda6.webp"></p><blockquote><p>源码地址：<a href="https://github.com/chaooo/spring-security-jwt.git">https://github.com/chaooo/spring-security-jwt.git</a>,<br>这里我将本文的登录认证逻辑放在github源码tag的V1.0中，防止后续修改后对不上。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;JSON Web Token（缩写 JWT）基于JSON格式信息一种Token令牌，是目前最流行的跨域认证解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
    <category term="JWT" scheme="http://chaooo.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」安全架构与认证鉴权原理</title>
    <link href="http://chaooo.github.io/2021/11/29/spring-security-filter.html"/>
    <id>http://chaooo.github.io/2021/11/29/spring-security-filter.html</id>
    <published>2021-11-29T06:01:00.000Z</published>
    <updated>2022-04-17T08:03:28.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Spring-Security-Servlet-安全架构"><a href="#1-Spring-Security-Servlet-安全架构" class="headerlink" title="1. Spring Security Servlet 安全架构"></a>1. Spring Security Servlet 安全架构</h3><p><code>Spring Security</code> 设计的 <code>Servlet</code> 安全从架构上分为三个层次，分别是「认证」、「鉴权」、「入侵防护」。通过<strong>过滤器机制</strong>将安全逻辑应用到 <code>Servlet</code> 项目。</p><p>请求的接收和处理是通过一个一个的过滤器顺序执行实现的，过滤器是 <code>Servlet</code> 项目处理请求的基础。</p><p><code>Spring</code> 将自己体系内的过滤器交由「过滤器代理<code>FilterChainProxy</code>」管理，<code>FilterChainProxy</code> 同样也是一个过滤器，被封装在 <code>Spring</code> 的「过滤器委托代理<code>DelegatingFilterProxy</code>」中。<br><code>Spring Security</code> 在 <code>FilterChainProxy</code> 中加入了「安全过滤器链<code>SecurityFilterChain</code>」实现安全保护功能。<span id="more"></span></p><p>其过程如图：<br><img src="/2021/11/29/spring-security-filter/up-0190e15403889a4a54ded3892f2a2d7cd18.webp"></p><p>安全过滤器链（<code>SecurityFilterChain</code>）的特点：</p><ul><li>为所有 <code>Spring Security</code> 支持的 <code>Servlet</code> 指明了起点；</li><li>对于一些后台操作，可以提升执行效率；</li><li>在 <code>Servlet</code> 容器中，过滤器的选择是由 <code>URL</code> 决定的，如此便可针对不同 <code>URL</code> 指定相互独立的安全策略。</li></ul><h4 id="1-1-安全过滤器-Filter"><a href="#1-1-安全过滤器-Filter" class="headerlink" title="1.1 安全过滤器 Filter"></a>1.1 安全过滤器 Filter</h4><p><code>Spring Security</code> 内置了 <code>33</code> 种安全过滤器，每个过滤器有固定的顺序及应用场景；内置过滤器的参数设置通过 <code>HttpSecurity</code> 类相应的配置方法完成。</p><p>在认证与授权中关键的三个过滤器：</p><ol><li><code>UsernamePasswordAuthenticationFilter</code>：该过滤器用于拦截我们表单提交的请求（默认为&#x2F;login），进行用户的认证过程。</li><li><code>FilterSecurityInterceptor</code>：该过滤器主要用来进行授权判断。</li><li><code>ExceptionTranslationFilter</code>：该过滤器主要用来捕获处理<code>spring security</code>抛出的异常，异常主要来源于<code>FilterSecurityInterceptor</code>。</li></ol><p><code>Spring Security</code> 的认证、授权异常在过滤器校验过程中产生，并在 <code>ExceptionTranslationFilter</code> 中接收并进行处理，</p><ol><li><code>ExceptionTranslationFilter</code> 过滤器首先像其他过滤器一样，调用过滤器链的执行方法 <code>FilterChain.doFilter(request, response)</code> 启动过滤处理；</li><li>如果当前的用户没有通过认证或者因为其他原因在执行过程中抛出了 AuthenticationException 异常，此时将开启「认证流程」：<ul><li>清空 <code>SecurityContextHolder</code> 对象；</li><li>并将原始请求信息「<code>request</code>」保存到 <code>RequestCache</code> 对象中；</li><li>使用 <code>AuthenticationEntryPoint</code> 对象存储的认证地址，向客户端索要身份证明。例如，使用浏览器登录的用户，将浏览器地址重定向到 &#x2F;login 或者回传一个 WWW-Authenticate 认证请求头。</li></ul></li><li>如果当前用户身份信息已确认，但是没有访问权限，则会产生 <code>AccessDeniedException</code> 异常，然后访问被拒绝。继续执行拒绝处理 <code>AccessDeniedHandler</code>。</li></ol><h4 id="1-2-自定义过滤器-Filter"><a href="#1-2-自定义过滤器-Filter" class="headerlink" title="1.2 自定义过滤器 Filter"></a>1.2 自定义过滤器 Filter</h4><p>在 <code>HttpSecurity</code> 对象中增加自定义 <code>Filter</code> 可用于实现认证方式的扩展等场景，扩展 <code>Filter</code> 需要实现 <code>javax.servlet.Filter</code> 接口；并且需要指定新过滤器的位置。</p><p>例如，扩展自定义接口 SimpleFilter。</p><ol><li>自定义接口类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;In SimpleFilter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>加入到指定位置，比如加在 UsernamePasswordAuthenticationFilter 之前</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(<span class="keyword">new</span> <span class="title class_">SimpleFilter</span>(), UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><h3 id="2-Spring-Security-认证"><a href="#2-Spring-Security-认证" class="headerlink" title="2. Spring Security 认证"></a>2. Spring Security 认证</h3><h4 id="2-1-Spring-Security-基本认证组件"><a href="#2-1-Spring-Security-基本认证组件" class="headerlink" title="2.1 Spring Security 基本认证组件"></a>2.1 Spring Security 基本认证组件</h4><table>    <thead><tr><th>组别</th><th>组件名</th><th>简述</th></tr></thead>    <tbody>        <tr><td rowspan="4">存储单元</td><td>Authentication</td><td>维护用户用于认证的信息</td></tr>        <tr><td>GrantedAuthority</td><td>认证用户的权限信息比如角色、范围等等</td></tr>        <tr><td>SecurityContextHolder</td><td>用于维护 SpringContext</td></tr>        <tr><td>SecurityContext</td><td>用来存储当前认证用户的信息</td></tr>        <tr><td rowspan="4">认证管理</td><td>AuthenticationManager</td><td>SpringSecurity 向外提供的用于认证的 API 集合</td></tr>        <tr><td>ProviderManager</td><td>AuthenticationManager 的常见实现类</td></tr>        <tr><td>AuthenticationProvider</td><td>用于 ProviderManager 提供认证实现</td></tr>        <tr><td>AuthenticationEntryPoint</td><td>用于获取用户认证信息</td></tr>        <tr><td>流程管理</td><td>AbstractAuthenticationProcessingFilter</td><td>是认证过滤器的基础，用于组合认证流程</td></tr>    </tbody></table><h4 id="2-2-存储单元"><a href="#2-2-存储单元" class="headerlink" title="2.2 存储单元"></a>2.2 存储单元</h4><p><img src="/2021/11/29/spring-security-filter/up-911c8967517a976252c03eb5d98f9a97151.webp"></p><ol><li><code>SecurityContextHolder</code> 对象是整个 <code>Spring Security</code> 体系的核心，它维护着 <code>SecurityContext</code> 对象。它是唯一的。</li><li><code>SecurityContext</code> 对象用于衔接 <code>SecurityContextHolder</code> 和 <code>Authentication</code> 对象，是对 <code>Authentication</code> 的外层封装。</li><li><code>Authentication</code> 是用户的认证信息。</li></ol><p><code>Authentication</code>对象有三个核心属性：</p><ul><li><strong>principal</strong>：用户的身份信息；</li><li><strong>credentials</strong>：用户的认证凭据，比如密码，通常情况下，当用户完成认证后，此项内容就会被清空；</li><li><strong>authorities</strong>：用户的权限，用于更高层次的鉴权功能，通常包括角色、使用范围等信息。该属性基本由 <code>GrantedAuthority</code> 实现。<code>GrantedAuthority</code> 是在前述 <code>Authentication</code> 对象中所指的权限信息。在开发过程中，可以通过 <code>Authentication.getAuthorities()</code> 方法获取。权限信息通常包括角色、范围，或者其他扩展内容。</li></ul><p><code>Authentication</code> 两个主要作用：</p><ol><li>为 <code>AuthenticationManager</code> 对象提供用于认证的信息载体；</li><li>用于获取某个用户的基本信息。</li></ol><h4 id="2-3-认证管理"><a href="#2-3-认证管理" class="headerlink" title="2.3 认证管理"></a>2.3 认证管理</h4><ol><li><code>AuthenticationManager</code> 为 <code>Spring</code> 过滤器提供认证支持 <code>API</code>。<code>AuthenticationManager</code> 的实现形式并没有严格限制，通常情况下使用 <code>ProviderManager</code>。</li><li><code>ProviderManager</code> 是 <code>AuthenticationManager</code> 的最常用的实现类，它包含了一系列的 <code>AuthenticationProvider</code> 对象，用以判断认证流程是否完成、认证结构是否成功。</li><li><code>AuthenticationProvider</code>：每个 <code>ProviderManager</code> 可以包含多个 <code>AuthenticationProvider</code> ，每个 <code>AuthenticationProvider</code> 提供一种认证类型，例如：<code>DaoAuthenticationProvider</code> 可以完成「用户名 &#x2F; 密码」的认证，<code>JwtAuthenticationProvider</code> 用于完成 JWT 方式的认证。</li><li><code>AuthenticationEntryPoint</code> 在当一个请求包含的认证信息不全时，比如未认证终端访问受保护资源时发挥作用，如跳转到登录页面、返回认证要求等。</li></ol><h4 id="2-4-流程管理"><a href="#2-4-流程管理" class="headerlink" title="2.4 流程管理"></a>2.4 流程管理</h4><p><code>AbstractAuthenticationProcessingFilter</code> 是所有认证过滤器的基类。</p><ol><li>当用户提交认证信息，AbstractAuthenticationProcessingFilter 首先从请求信息（例如用户名、密码）中创建 Authentication 对象；</li><li>将 Authentication 对象传递给 AuthenticationManager 对象，用于后续认证；</li><li>如果认证失败，则执行失败流程：<ul><li>清空 SecurityContextHolder 对象；</li><li>触发 RememberMeServices.loginFail 方法；</li><li>触发 AuthenticationFailureHandler。</li></ul></li><li>如果认证成功，则执行成功流程：<ul><li>SessionAuthenticationStrategy 登记新的登录；</li><li>将 Authentication 对象设置到 SecurityContextHolder 对象中，并将 SecurityContext 对象保持到 Session 中；</li><li>调用 RememberMeServices.loginSuccess 方法；</li><li>ApplicationEventPublisher 发起事件 InteractiveAuthenticationSuccessEvent</li></ul></li></ol><h3 id="3-Spring-Security-鉴权"><a href="#3-Spring-Security-鉴权" class="headerlink" title="3. Spring Security 鉴权"></a>3. Spring Security 鉴权</h3><p>Spring Security 包含<strong>确认身份</strong>和<strong>确认身份的可执行操作</strong>两部分，前者为认证(<code>Authentication</code>)，后者即为鉴权(<code>Authorization</code>)；</p><h4 id="3-1-权限"><a href="#3-1-权限" class="headerlink" title="3.1 权限"></a>3.1 权限</h4><p><code>Spring Security</code> 的权限默认是以字符串形式存储的权限信息，比如角色名称、功能名称等；</p><p>在用户身份信息得到确认后，<code>Authentication</code> 中会存储一系列的 <code>GrantedAuthority</code> 对象，这些对象用来判断用户可以使用哪些资源。</p><p><code>GrantedAuthority</code> 对象通过 <code>AuthenticationManager</code> 插入到 <code>Authentication</code> 对象中，并被 <code>AccessDecisionManager</code> 使用，判断其权限。</p><p><code>GrantedAuthority</code> 是一个接口，其仅包含一个 <code>getAuthority()</code> 方法，返回一个字符串值，该值作为权限的描述，当权限较为复杂，该方法需要返回 null，此时 <code>AccessDecisionManager</code> 会根据 <code>getAuthority()</code> 返回值情况判断是否要进行特殊处理。</p><p><code>SimpleGrantedAuthority</code> 是 <code>GrantedAuthority</code> 的一个基础实现类，可以满足一般的业务需求。</p><h4 id="3-2-鉴权"><a href="#3-2-鉴权" class="headerlink" title="3.2 鉴权"></a>3.2 鉴权</h4><ul><li>前置鉴权：由 <code>AccessDecisionManager</code> 对象判断其是否允许继续执行； 权限判断发生在方法被调用前，或者 WEB 请求之前。不满足抛出 <code>AccessDeniedException</code> 异常。</li><li>后置鉴权：通过 <code>AfterInvocationManager</code> 进行管理；后置鉴权在资源被访问后，根据权限的判定来修改返回的内容，或者返回 <code>AccessDeniedException</code>。</li></ul><p>前置鉴权 <code>AccessDecisionManager</code> 对象由 <code>AbstractSecurityInterceptor</code> 发起调用，其职责是给出资源是否能被访问的最终结果；</p><ul><li><code>AccessDecisionManager</code> 包含三个主要方法：<ul><li><code>boolean supports(ConfigAttribute attribute);</code>：判断配置属性是否可被访问；</li><li><code>boolean supports(Class clazz);</code>：判断安全对象的类型是否支持被访问；</li><li><code>void decide(Authentication authentication, Object secureObject,Collection&lt;ConfigAttribute&gt; attrs) throws AccessDeniedException;</code>：通过认证信息、安全对象、权限信息综合判断安全对象是否允许被访问。</li></ul></li></ul><p><code>Spring Security</code> 内置了以「<strong>投票</strong>」为判定方法的鉴权策略。<code>Spring Security</code> 的鉴权策略可以由用户自己实现。</p><p><strong>投票策略</strong>下，<code>AccessDecisionManager</code> 控制着一系列的 <code>AccessDecisionVoter</code> 实例，判断权限是否满足，如果不满足抛出 <code>AccessDeniedException</code> 异常。</p><ul><li><code>AccessDecisionVoter</code> 也包含三个方法：<ul><li><code>boolean supports(ConfigAttribute attribute);</code>：判断配置属性是否支持；</li><li><code>boolean supports(Class clazz);</code>：判断类型是否支持；</li><li><code>int vote(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; attrs);</code>：根据认证信息对安全资源进行投票。</li></ul></li></ul><p>投票鉴权分为三类：</p><ul><li>基于角色的投票：<code>RoleVoter</code>；</li><li>基于认证信息的投票：<code>AuthenticatedVoter</code>，主要区分认证用户、匿名用户等；</li><li>自定义投票策略。</li></ul><h4 id="3-3-Servlet-请求鉴权流程"><a href="#3-3-Servlet-请求鉴权流程" class="headerlink" title="3.3 Servlet 请求鉴权流程"></a>3.3 Servlet 请求鉴权流程</h4><p><code>Servlet</code> 鉴权主要围绕着 <code>FilterSecurityInterceptor</code> 类展开，该类作为一个安全过滤器，被放置在 <code>FilterChainProxy</code> 中。</p><p>具体流程如下：</p><ol><li><code>FilterSecurityInterceptor</code> 从 <code>SecurityContextHolder</code> 中获取 <code>Authentication</code> 对象；</li><li><code>FilterSecurityInterceptor</code> 从 <code>HttpServletRequest</code>、<code>HttpServletREsponse</code>、 <code>FilterChain</code> 中创建 <code>FilterInvocation</code> 对象；</li><li>将创建的 <code>FilterInvocation</code> 对象传递给 <code>SecurityMetadataSource</code> 用来获取 <code>ConfigAttribute</code> 对象集合；</li><li>最后，将 <code>Authentication</code>、<code>FilterInvocation</code> 和 <code>ConfigAttribute</code> 对象传递给 <code>AccessDecisionManager</code> 实例验证权限：<ul><li>如果验证失败，将抛出 <code>AccessDeniedException</code> 异常，并由 <code>ExceptionTranslationFilter</code> 接收并处理；</li><li>如果验证通过，<code>FilterSecurityInterceptor</code> 将控制权交还给 <code>FilterChain</code>，使程序继续执行。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Spring-Security-Servlet-安全架构&quot;&gt;&lt;a href=&quot;#1-Spring-Security-Servlet-安全架构&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Security Servlet 安全架构&quot;&gt;&lt;/a&gt;1. Spring Security Servlet 安全架构&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Spring Security&lt;/code&gt; 设计的 &lt;code&gt;Servlet&lt;/code&gt; 安全从架构上分为三个层次，分别是「认证」、「鉴权」、「入侵防护」。通过&lt;strong&gt;过滤器机制&lt;/strong&gt;将安全逻辑应用到 &lt;code&gt;Servlet&lt;/code&gt; 项目。&lt;/p&gt;
&lt;p&gt;请求的接收和处理是通过一个一个的过滤器顺序执行实现的，过滤器是 &lt;code&gt;Servlet&lt;/code&gt; 项目处理请求的基础。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt; 将自己体系内的过滤器交由「过滤器代理&lt;code&gt;FilterChainProxy&lt;/code&gt;」管理，&lt;code&gt;FilterChainProxy&lt;/code&gt; 同样也是一个过滤器，被封装在 &lt;code&gt;Spring&lt;/code&gt; 的「过滤器委托代理&lt;code&gt;DelegatingFilterProxy&lt;/code&gt;」中。&lt;br&gt;&lt;code&gt;Spring Security&lt;/code&gt; 在 &lt;code&gt;FilterChainProxy&lt;/code&gt; 中加入了「安全过滤器链&lt;code&gt;SecurityFilterChain&lt;/code&gt;」实现安全保护功能。</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>「Spring Security」Spring Security 基础入门示例</title>
    <link href="http://chaooo.github.io/2021/11/25/spring-security-base.html"/>
    <id>http://chaooo.github.io/2021/11/25/spring-security-base.html</id>
    <published>2021-11-25T07:01:00.000Z</published>
    <updated>2022-04-17T07:35:29.551Z</updated>
    
    <content type="html"><![CDATA[<p><code>Spring Security</code> 是一个功能强大且高度可定制的身份验证和访问控制的安全框架。它是 <code>Spring</code> 应用程序在安全框架方面的公认标准。</p><p>其核心特性包括：认证和授权、常规攻击防范、与 <code>Servlet</code> 接口集成、与 <code>Spring MVC</code> 集成等。</p><p>常规攻击防范在 <code>Spring Security</code> 安全框架中是默认开启的，常见的威胁抵御方式有：防止伪造跨站请求（<code>CSRF</code>），安全响应头（<code>HTTP Response headers</code>），<code>HTTP</code>通讯安全等<span id="more"></span></p><h3 id="1-入门示例"><a href="#1-入门示例" class="headerlink" title="1. 入门示例"></a>1. 入门示例</h3><p>新建 <code>SpringBoot</code> 项目，在 <code>pom.xml</code> 中增加 <code>Spring Security</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>只要加入依赖，项目的所有接口都会被自动保护起来。</p></blockquote><p>创建一个 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApi</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入<code>spring-boot-starter-security</code>启动后，<code>Spring Security</code>已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。</p><p>访问<code>/hello</code>接口 ，需要登录之后才能访问。</p><p><img src="/2021/11/25/spring-security-base/up-44bc65394ab67d8d0445bc7a0dc9913df6a.webp"></p><p>默认配置下，会自动生成一个 <code>user</code> 用户，并分配其随机密码，密码可以从控制台的日志信息中找到：</p><p><img src="/2021/11/25/spring-security-base/up-2a23b6505fa1faae06a8f1f25f910f979b7.webp"></p><h3 id="2-Spring-Security默认配置项"><a href="#2-Spring-Security默认配置项" class="headerlink" title="2. Spring Security默认配置项"></a>2. Spring Security默认配置项</h3><p><code>Spring Boot</code> 引入 <code>Spring Security</code> 启动后，将会自动开启如下配置项：</p><ul><li>默认开启一系列基于 <code>springSecurityFilterChain</code> 的 <code>Servlet</code> 过滤器，包含了几乎所有的安全功能，例如：保护系统 <code>URL</code>、验证用户名、密码表单、重定向到登录界面等；</li><li>创建 <code>UserDetailsService</code> 实例，并生成随机密码，用于获取登录用户的信息详情；</li><li>将安全过滤器应用到每一个请求上。</li></ul><p>除此之外，<code>Spring Security</code> 还有一些其他可配置的功能：</p><ul><li>限制所有访问必须首先通过认证；</li><li>生成默认登录表单；</li><li>创建用户名为 <code>user</code> 的可以通过表单认证的用户，并为其初始化密码；</li><li>使用 <code>BCrypt</code> 方式加密密码；</li><li>提供登出的能力；</li><li>保护系统不受 <code>CSRF</code> 攻击；</li><li>会话固定保护；</li><li>集成安全消息头；</li><li>提供一些默认的 <code>Servlet</code> 接口，如：「getRemoteUser」、「getUserPrincipal」、「isUserInRole」、「login」和「logout」。</li></ul><h3 id="3-配置文件定义用户信息"><a href="#3-配置文件定义用户信息" class="headerlink" title="3. 配置文件定义用户信息"></a>3. 配置文件定义用户信息</h3><p>也可以直接在 <code>application.yml</code> 配置文件中配置用户的基本信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      name: user</span><br><span class="line">      password: 123</span><br></pre></td></tr></table></figure><p>配置完成后，重启项目，就可以使用这里配置的用户名&#x2F;密码登录了。</p><h3 id="4-Java代码定义用户信息"><a href="#4-Java代码定义用户信息" class="headerlink" title="4. Java代码定义用户信息"></a>4. Java代码定义用户信息</h3><p>如果需要自定义逻辑时，只需要实现<code>UserDetailsService</code>接口即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder encoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 判断用户名是否存在(用户名也可查询数据库)，如果不存在抛出UsernameNotFoundException</span></span><br><span class="line">        <span class="keyword">if</span>(!username.equals(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把查询出来的密码进行解析,或直接把password放到构造方法中。</span></span><br><span class="line">        <span class="comment">// 理解:password就是数据库中查询出来的密码，查询出来的内容不是123</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> encoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值 <code>UserDetails</code> 是一个接口，要想返回 <code>UserDetails</code> 的实例就只能返回接口的实现类。<br>这里使用 <code>Spring Security</code> 中提供的 <code>org.springframework.security.core.userdetails.User</code>。</p><p><code>Spring Security</code> 要求：当进行自定义登录逻辑时容器内必须有 <code>PasswordEncoder</code> 实例。</p><p>客户端密码和数据库密码是否匹配是由 <code>Spring Security</code> 去完成的，但 <code>Security</code> 中没有默认密码解析器。所以当自定义登录逻辑时要求必须给容器注入<code>PaswordEncoder</code>的<code>bean</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">getPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * BCryptPasswordEncoder是spring security官方推荐的解析器，</span></span><br><span class="line"><span class="comment">         * 它是对bcrypt强散列方法的具体实现，基于Hash算法实现的单向加密。</span></span><br><span class="line"><span class="comment">         * 可以通过strength控制加密强度，默认为10，长度越长安全性越高。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目后，在浏览器中输入账号：<code>admin</code>，密码：<code>123</code>，登录后就可以访问接口了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Spring Security&lt;/code&gt; 是一个功能强大且高度可定制的身份验证和访问控制的安全框架。它是 &lt;code&gt;Spring&lt;/code&gt; 应用程序在安全框架方面的公认标准。&lt;/p&gt;
&lt;p&gt;其核心特性包括：认证和授权、常规攻击防范、与 &lt;code&gt;Servlet&lt;/code&gt; 接口集成、与 &lt;code&gt;Spring MVC&lt;/code&gt; 集成等。&lt;/p&gt;
&lt;p&gt;常规攻击防范在 &lt;code&gt;Spring Security&lt;/code&gt; 安全框架中是默认开启的，常见的威胁抵御方式有：防止伪造跨站请求（&lt;code&gt;CSRF&lt;/code&gt;），安全响应头（&lt;code&gt;HTTP Response headers&lt;/code&gt;），&lt;code&gt;HTTP&lt;/code&gt;通讯安全等</summary>
    
    
    
    <category term="安全认证" scheme="http://chaooo.github.io/categories/safe/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="安全认证" scheme="http://chaooo.github.io/tags/safe/"/>
    
    <category term="SpringSecurity" scheme="http://chaooo.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>「SpringCloud」OpenFeign整合Sentinel实现熔断降级</title>
    <link href="http://chaooo.github.io/2021/11/23/spring-cloud-sentinel.html"/>
    <id>http://chaooo.github.io/2021/11/23/spring-cloud-sentinel.html</id>
    <published>2021-11-23T09:01:00.000Z</published>
    <updated>2022-04-17T08:06:04.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Sentinel简介"><a href="#1-Sentinel简介" class="headerlink" title="1. Sentinel简介"></a>1. Sentinel简介</h3><p><a href="https://github.com/alibaba/Sentinel">Sentinel</a> 是阿里开源的项目，提供了流量控制、熔断降级、系统负载保护等多个维度来保障服务之间的稳定性。</p><p>Sentinel 分为两个部分:</p><ul><li>核心库（<code>Java</code> 客户端）不依赖任何框架&#x2F;库，能够运行于所有 <code>Java</code> 运行时环境，同时对 <code>Dubbo / Spring Cloud</code> 等框架也有较好的支持。</li><li>控制台（<code>Dashboard</code>）基于 <code>Spring Boot</code> 开发，打包后可以直接运行，不需要额外的 <code>Tomcat</code> 等应用容器。<span id="more"></span></li></ul><p>这里仅介绍<code>Sentinel</code>核心库 与 <code>Spring Cloud OpenFeign</code>整合使用。</p><h3 id="2-Sentinel与OpenFeign整合"><a href="#2-Sentinel与OpenFeign整合" class="headerlink" title="2. Sentinel与OpenFeign整合"></a>2. Sentinel与OpenFeign整合</h3><p>基于上一篇<a href="https://my.oschina.net/chaoo/blog/5308587">OpenFeign服务间调用</a></p><h4 id="2-1-在pom-xml文件中添加依赖"><a href="#2-1-在pom-xml文件中添加依赖" class="headerlink" title="2.1 在pom.xml文件中添加依赖"></a>2.1 在<code>pom.xml</code>文件中添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-在YMAL配置文件中添加如下配置"><a href="#2-2-在YMAL配置文件中添加如下配置" class="headerlink" title="2.2 在YMAL配置文件中添加如下配置"></a>2.2 在<code>YMAL</code>配置文件中添加如下配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件打开 Sentinel 对 Feign 的支持</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><blockquote><p><code>Feign</code> 对应的接口中的资源名策略定义：<code>httpmethod:protocol://requesturl</code>。<code>@FeignClient</code> 注解中的所有属性，<code>Sentinel</code> 都做了兼容。<br>如：ToolsFeign 接口中方法 getSendSms 对应的资源名为 POST:<a href="http://xxx-cloud-tools/tools/sms/send%E3%80%82">http://XXX-CLOUD-TOOLS/tools/sms/send。</a></p></blockquote><h4 id="2-3-修改OpenFeign调用远程服务，-FeignClient属性中配置降级回调类"><a href="#2-3-修改OpenFeign调用远程服务，-FeignClient属性中配置降级回调类" class="headerlink" title="2.3 修改OpenFeign调用远程服务，@FeignClient属性中配置降级回调类"></a>2.3 修改<code>OpenFeign</code>调用远程服务，<code>@FeignClient</code>属性中配置降级回调类</h4><p><code>@FeignClient</code>属性中的<code>fallback</code>和<code>fallbackFactory</code></p><ul><li><code>fallback</code>：定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，<code>fallback</code>指定的类必须实现<code>@FeignClient</code>标记的接口。</li><li><code>fallbackFactory</code>：工厂类，用于生成<code>fallback</code>类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码。</li></ul><blockquote><p>注：同一个<code>@FeignClient</code>里，<code>fallback</code> 和 <code>fallbackFactory</code> 不能同时使用。</p></blockquote><h5 id="2-3-1-使用fallback示例"><a href="#2-3-1-使用fallback示例" class="headerlink" title="2.3.1 使用fallback示例"></a>2.3.1 使用fallback示例</h5><ol><li>按照<code>Feign</code>的规则定义接口，使用<code>fallback</code>属性：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value是远程调用微服务在注册中心的服务名。</span></span><br><span class="line"><span class="comment"> * fallback：定义容错的类，当远程调用的接口失败或者超时的时候，会调用对应接口的容错逻辑，</span></span><br><span class="line"><span class="comment"> * fallback指定的类必须实现<span class="doctag">@FeignClient</span>标记的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;XXX-CLOUD-TOOLS&quot;, fallback = ToolsFeignFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToolsFeign</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用TOOLS服务接口“/tools/sms/send”--请求发短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/tools/sms/send&quot;)</span></span><br><span class="line">    String <span class="title function_">getSendSms</span><span class="params">(<span class="meta">@RequestParam</span> String mobile, <span class="meta">@RequestParam</span> String content)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写降级回调类<code>ToolsFeignFallback.calss</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToolsFeignFallback</span> <span class="keyword">implements</span> <span class="title class_">ToolsFeign</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSendSms</span><span class="params">(String mobile, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接口容错-fallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-使用fallbackFactory示例"><a href="#2-3-2-使用fallbackFactory示例" class="headerlink" title="2.3.2 使用fallbackFactory示例"></a>2.3.2 使用fallbackFactory示例</h5><ol><li>按照<code>Feign</code>的规则定义接口，使用<code>fallbackFactory</code>属性：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value是远程调用微服务在注册中心的服务名。</span></span><br><span class="line"><span class="comment"> * fallbackFactory：工厂类，用于生成fallback类实例，</span></span><br><span class="line"><span class="comment"> * 通过此属性可以实现每个接口通用的容错逻辑，以达到减少重复的代码。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;XXX-CLOUD-TOOLS&quot;, fallbackFactory = ToolsFeignFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToolsFeign</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用TOOLS服务接口“/tools/sms/send”--请求发短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/tools/sms/send&quot;)</span></span><br><span class="line">    String <span class="title function_">getSendSms</span><span class="params">(<span class="meta">@RequestParam</span> String mobile, <span class="meta">@RequestParam</span> String content)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写降级回调工厂类<code>ToolsFeignFallbackFactory.calss</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToolsFeignFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ToolsFeignFallback&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ToolsFeignFallback <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ToolsFeignFallback</span>(throwable);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写降级回调类<code>ToolsFeignFallback.calss</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sentinel 降级处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToolsFeignFallback</span> <span class="keyword">implements</span> <span class="title class_">ToolsFeign</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Throwable throwable;</span><br><span class="line">ToolsFeignFallback(Throwable throwable) &#123;</span><br><span class="line"><span class="built_in">this</span>.throwable = throwable;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务提供方的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSendSms</span><span class="params">(String mobile, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接口容错-fallback&quot;</span> + throwable.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Sentinel-熔断降级"><a href="#3-Sentinel-熔断降级" class="headerlink" title="3. Sentinel 熔断降级"></a>3. Sentinel 熔断降级</h3><h4 id="3-1-Sentinel-熔断策略"><a href="#3-1-Sentinel-熔断策略" class="headerlink" title="3.1 Sentinel 熔断策略"></a>3.1 Sentinel 熔断策略</h4><ul><li><strong>慢调用比例</strong> (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 <code>RT</code>（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN</code> 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li><li><strong>异常比例</strong> (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN</code> 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li><li><strong>异常数</strong> (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN</code> 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul><blockquote><p>注意异常降级仅针对业务异常，对 <code>Sentinel</code> 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。<br>开源整合模块，如 <code>Sentinel Dubbo Adapter</code>, <code>Sentinel Web Servlet Filter</code> 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。</p></blockquote><h4 id="3-2-Sentinel熔断降级规则说明"><a href="#3-2-Sentinel熔断降级规则说明" class="headerlink" title="3.2 Sentinel熔断降级规则说明"></a>3.2 Sentinel熔断降级规则说明</h4><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p><table><thead><tr><th align="center">Field</th><th align="left">说明</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="center">resource</td><td align="left">资源名，即规则的作用对象</td><td align="left">–</td></tr><tr><td align="center">grade</td><td align="left">熔断策略，支持 慢调用比例&#x2F;异常比例&#x2F;异常数策略</td><td align="left">慢调用比例</td></tr><tr><td align="center">count</td><td align="left">慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例&#x2F;异常数模式下为对应的阈值</td><td align="left">–</td></tr><tr><td align="center">timeWindow</td><td align="left">熔断时长，单位为 s</td><td align="left">–</td></tr><tr><td align="center">minRequestAmount</td><td align="left">熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td align="left">5</td></tr><tr><td align="center">statIntervalMs</td><td align="left">统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td><td align="left">1000 ms</td></tr><tr><td align="center">slowRatioThreshold</td><td align="left">慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td><td align="left">–</td></tr></tbody></table><h4 id="3-3-熔断器事件监听"><a href="#3-3-熔断器事件监听" class="headerlink" title="3.3 熔断器事件监听"></a>3.3 熔断器事件监听</h4><p>Sentinel 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventObserverRegistry.getInstance().addStateChangeObserver(<span class="string">&quot;logging&quot;</span>, (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (newState == State.OPEN) &#123;</span><br><span class="line">        <span class="comment">// 变换至 OPEN state 时会携带触发时的值</span></span><br><span class="line">        System.err.println(String.format(<span class="string">&quot;%s -&gt; OPEN at %d, snapshotValue=%.2f&quot;</span>, prevState.name(), TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.err.println(String.format(<span class="string">&quot;%s -&gt; %s at %d&quot;</span>, prevState.name(), newState.name(), TimeUtil.currentTimeMillis()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Sentinel简介&quot;&gt;&lt;a href=&quot;#1-Sentinel简介&quot; class=&quot;headerlink&quot; title=&quot;1. Sentinel简介&quot;&gt;&lt;/a&gt;1. Sentinel简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/Sentinel&quot;&gt;Sentinel&lt;/a&gt; 是阿里开源的项目，提供了流量控制、熔断降级、系统负载保护等多个维度来保障服务之间的稳定性。&lt;/p&gt;
&lt;p&gt;Sentinel 分为两个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心库（&lt;code&gt;Java&lt;/code&gt; 客户端）不依赖任何框架&amp;#x2F;库，能够运行于所有 &lt;code&gt;Java&lt;/code&gt; 运行时环境，同时对 &lt;code&gt;Dubbo / Spring Cloud&lt;/code&gt; 等框架也有较好的支持。&lt;/li&gt;
&lt;li&gt;控制台（&lt;code&gt;Dashboard&lt;/code&gt;）基于 &lt;code&gt;Spring Boot&lt;/code&gt; 开发，打包后可以直接运行，不需要额外的 &lt;code&gt;Tomcat&lt;/code&gt; 等应用容器。</summary>
    
    
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/categories/SpringCloud/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/tags/SpringCloud/"/>
    
    <category term="Sentinel" scheme="http://chaooo.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>「SpringCloud」OpenFeign服务间调用</title>
    <link href="http://chaooo.github.io/2021/11/12/spring-cloud-feign.html"/>
    <id>http://chaooo.github.io/2021/11/12/spring-cloud-feign.html</id>
    <published>2021-11-12T08:01:00.000Z</published>
    <updated>2022-04-17T07:30:02.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Spring-Cloud-OpenFeign简介"><a href="#1-Spring-Cloud-OpenFeign简介" class="headerlink" title="1. Spring Cloud OpenFeign简介"></a>1. Spring Cloud OpenFeign简介</h3><p><code>OpenFeign</code>是<code>SpringCloud</code>提供的一个声明式的伪<code>Http</code>客户端，它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。<br><code>OpenFeign</code>是<code>SpringCloud</code>在<code>Feign</code>的基础上支持了<code>Spring MVC</code>的注解，并通过动态代理的方式产生实现类来做负载均衡并进行调用其他服务。<span id="more"></span></p><h4 id="1-1-OpenFeign使用流程："><a href="#1-1-OpenFeign使用流程：" class="headerlink" title="1.1 OpenFeign使用流程："></a>1.1 OpenFeign使用流程：</h4><ol><li>引入<code>Spring Cloud OpenFeign</code>的依赖</li><li>启动类上添加注解<code>@EnableFeignCleints</code></li><li>按照<code>Feign</code>的规则定义接口并添加<code>@FeignClient</code>注解</li><li>在需要使用<code>Feign</code>接口的类里注入，直接调用接口方法</li></ol><h3 id="2-OpenFeign的使用"><a href="#2-OpenFeign的使用" class="headerlink" title="2. OpenFeign的使用"></a>2. OpenFeign的使用</h3><ol><li>在<code>pom.xml</code>文件中添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在启动类上，加上<code>@EnableFeignCleints</code>注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// basePackages 是Feign接口定义的路径</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.XXX.feign&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>按照<code>Feign</code>的规则定义接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号内是远程调用微服务在注册中心的服务名</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;XXX-CLOUD-TOOLS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToolsFeign</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用TOOLS服务接口“/tools/sms/send”--请求发短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/tools/sms/send&quot;)</span></span><br><span class="line">    String <span class="title function_">getSendSms</span><span class="params">(<span class="meta">@RequestParam</span> String mobile, <span class="meta">@RequestParam</span> String content)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>调用<code>Feign</code>接口方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteCallServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RemoteCallService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在需要使用`Feign`接口的类里注入ToolsFeign</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ToolsFeign toolsFeign;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 ToolsFeign 发送短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">remoteSendSms</span><span class="params">(String mobile, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toolsFeign.getSendSms(mobile, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>远程服务接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/tools&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsApi</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> smsDto &#123;</span></span><br><span class="line"><span class="comment">     *                mobile  手机号</span></span><br><span class="line"><span class="comment">     *                content 短信内容</span></span><br><span class="line"><span class="comment">     *               &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sms/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseJson&lt;String&gt; <span class="title function_">sendSms</span><span class="params">(SmsDto smsDto)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> SmsUtil.sendSms(smsDto.getMobile(), smsDto.getContent());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> (JSONObject) JSONObject.parse(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != json &amp;&amp; json.getInteger(<span class="string">&quot;code&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseJson.success(<span class="number">0</span>, <span class="string">&quot;发送成功&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseJson.error(<span class="number">0</span>, <span class="string">&quot;发送失败&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-OpenFeign的核心工作原理："><a href="#3-OpenFeign的核心工作原理：" class="headerlink" title="3. OpenFeign的核心工作原理："></a>3. OpenFeign的核心工作原理：</h3><ol><li>通过<code>@EnableFeignCleints</code>触发<code>Spring</code>应用程序对<code>classpath</code>中<code>@FeignClient</code>修饰类的扫描</li><li>解析到<code>@FeignClient</code>修饰类后，<code>Feign</code>框架通过扩展<code>SpringBeanDeifinition</code>的注册逻辑，最终注册一个<code>FeignClientFacotoryBean</code>进入<code>Spring</code>容器</li><li><code>Spring</code>容器在初始化其他用到<code>@FeignClient</code>接口的类时，获得的是<code>FeignClientFacotryBean</code>产生的一个代理对象<code>Proxy</code>.</li><li>基于<code>java</code>原生的动态代理机制，针对<code>Proxy</code>的调用，都会被统一转发给<code>Feign</code>框架所定义的一个<code>InvocationHandler</code>，由该<code>Handler</code>完成后续的<code>HTTP</code>转换，发送，接收，翻译<code>HTTP</code>响应的工作</li></ol><h3 id="4-OpenFeign日志"><a href="#4-OpenFeign日志" class="headerlink" title="4. OpenFeign日志"></a>4. OpenFeign日志</h3><p><code>Feign</code> 和 <code>RestTemplate</code> 不一样 ，对请求细节封装的更加彻底，不管是请求还是请求的参数，还是响应的状态都看不到，想要看到请求的细节需要通过<code>Feign</code>的日志，我们可以通过配置来调整日志级别，从而了解<code>OpenFeign</code>中<code>Http</code>请求的细节。即对<code>OpenFeign</code>远程接口调用的情况进行监控和日志输出。</p><h4 id="4-1-日志级别"><a href="#4-1-日志级别" class="headerlink" title="4.1 日志级别"></a>4.1 日志级别</h4><ul><li><code>NONE</code>：默认级别，不显示日志</li><li><code>BASIC</code>：仅记录请求方法、<code>URL</code>、响应状态及执行时间</li><li><code>HEADERS</code>：除了<code>BASIC</code>中定义的信息之外，还有请求和响应头信息</li><li><code>FULL</code>：除了<code>HEADERS</code>中定义的信息之外，还有请求和响应正文及元数据信息</li></ul><h4 id="4-2-配置日志bean"><a href="#4-2-配置日志bean" class="headerlink" title="4.2 配置日志bean"></a>4.2 配置日志bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-开启日志"><a href="#4-3-开启日志" class="headerlink" title="4.3 开启日志"></a>4.3 开启日志</h4><p>在<code>YMAL</code>配置文件中中指定监控的接口，以及日志级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.XXX.feign.ToolsFeign: debug  # 以什么级别监控哪个接口</span><br></pre></td></tr></table></figure><p><img src="/2021/11/12/spring-cloud-feign/up-509245506c54819c3220067d999b6df8a85.webp"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Spring-Cloud-OpenFeign简介&quot;&gt;&lt;a href=&quot;#1-Spring-Cloud-OpenFeign简介&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Cloud OpenFeign简介&quot;&gt;&lt;/a&gt;1. Spring Cloud OpenFeign简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;OpenFeign&lt;/code&gt;是&lt;code&gt;SpringCloud&lt;/code&gt;提供的一个声明式的伪&lt;code&gt;Http&lt;/code&gt;客户端，它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。&lt;br&gt;&lt;code&gt;OpenFeign&lt;/code&gt;是&lt;code&gt;SpringCloud&lt;/code&gt;在&lt;code&gt;Feign&lt;/code&gt;的基础上支持了&lt;code&gt;Spring MVC&lt;/code&gt;的注解，并通过动态代理的方式产生实现类来做负载均衡并进行调用其他服务。</summary>
    
    
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/categories/SpringCloud/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/tags/SpringCloud/"/>
    
    <category term="OpenFeign" scheme="http://chaooo.github.io/tags/OpenFeign/"/>
    
  </entry>
  
  <entry>
    <title>「SpringCloud」Config配置中心</title>
    <link href="http://chaooo.github.io/2021/11/09/spring-cloud-config.html"/>
    <id>http://chaooo.github.io/2021/11/09/spring-cloud-config.html</id>
    <published>2021-11-09T10:01:00.000Z</published>
    <updated>2022-04-17T07:30:06.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Spring-Cloud-Config简介"><a href="#1-Spring-Cloud-Config简介" class="headerlink" title="1. Spring Cloud Config简介"></a>1. Spring Cloud Config简介</h3><p><code>Spring Cloud Config</code>可以为微服务架构中的应用提供集中化的外部配置支持，它分为服务端和客户端两个部分。<br>服务端被称为分布式配置中心，它是个独立的应用，可以从配置仓库获取配置信息并提供给客户端使用。<br>客户端可以通过配置中心来获取配置信息，在启动时加载配置。<br><code>Spring Cloud Config</code>默认采用<code>Git</code>来存储配置信息，所以天然就支持配置信息的版本管理，并且可以使用<code>Git</code>客户端来方便地管理和访问配置信息。<span id="more"></span></p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h3><p>因为<code>config server</code>是需要到<code>git</code>上拉取配置文件的，所以还需要在远程的<code>git</code>上新建一个存放配置文件的仓库，<br>如下仓库中存放客户端配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application-beta.yml</span><br><span class="line">application-dev.yml</span><br><span class="line">application-prod.yml</span><br></pre></td></tr></table></figure><h3 id="3-配置中心服务端搭建"><a href="#3-配置中心服务端搭建" class="headerlink" title="3. 配置中心服务端搭建"></a>3. 配置中心服务端搭建</h3><ol><li>搭建服务端配置中心（<code>config-server</code>），在<code>pom.xml</code>文件中添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册到注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在服务端编辑<code>application.yml</code>配置文件内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8009</span><br><span class="line"># 指定当前服务的名称，这个名称会注册到注册中心</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git: #配置存储配置信息的Git仓库</span><br><span class="line">          uri: http://git.xxx.com/config-files.git # 远程git仓库的地址</span><br><span class="line">          username: username                       # git账户名</span><br><span class="line">          password: password                       # git密码</span><br><span class="line">          clone-on-start: true                     # 开启启动时直接从git获取配置</span><br><span class="line">          search-paths: /**                        # 指定搜索根路径下的目录，若有多个路径使用逗号隔开</span><br><span class="line"></span><br><span class="line"># 指定服务注册中心的地址</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true                                       # 是否使用 ip 地址注册</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125; # ip:port</span><br><span class="line">  client:</span><br><span class="line">    service-url:                                                  # 设置服务注册中心地址</span><br><span class="line">      defaultZone: http://localhost:18000/eureka/</span><br></pre></td></tr></table></figure><ol start="3"><li>在启动类上，加上<code>@EnableConfigServer</code>注解，声明这是一个<code>config-server</code>。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `<span class="doctag">@EnableDiscoveryClient</span>`: 声明一个可以被发现的客户端</span></span><br><span class="line"><span class="comment"> * `<span class="doctag">@EnableConfigServer</span>`: 声明一个Config配置服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动项目，访问<code>http://localhost:8009/master/application-dev.yml</code>，可以看到能够访问到客户端配置文件的内容。</li></ol><h3 id="4-客户端获取配置"><a href="#4-客户端获取配置" class="headerlink" title="4. 客户端获取配置"></a>4. 客户端获取配置</h3><ol><li>在<code>pom.xml</code>文件中添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编辑<code>bootstrap.yml</code>配置文件内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 18001</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:            #Config客户端配置</span><br><span class="line">      profile: dev                 #启用配置后缀名称</span><br><span class="line">      label: master                #分支名称</span><br><span class="line">      uri: http://localhost:8009   #配置中心地址</span><br><span class="line">      name: application            #配置文件名称</span><br></pre></td></tr></table></figure><p>启动服务，配置中心读取的配置生效。</p><h3 id="5-获取配置信息的基本规则"><a href="#5-获取配置信息的基本规则" class="headerlink" title="5. 获取配置信息的基本规则"></a>5. 获取配置信息的基本规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取配置信息</span><br><span class="line">/&#123;label&#125;/&#123;name&#125;‐&#123;profile&#125;</span><br><span class="line"># 获取配置文件信息</span><br><span class="line">/&#123;label&#125;/&#123;name&#125;‐&#123;profile&#125;.yml</span><br></pre></td></tr></table></figure><ul><li><code>name</code> : 文件名，一般以服务名(<code>spring.application.name</code>)来命名，如果配置了<code>spring.cloud.config.name</code>，则为该名称.</li><li><code>profiles</code> : 一般作为环境标识，对应配置文件中的<code>spring.cloud.config.profile</code></li><li><code>lable</code> : 分支（<code>branch</code>），指定访问某分支下的配置文件，对应配置文件中的<code>spring.cloud.config.label</code>，默认值是在服务器上设置的(对于基于<code>git</code>的服务器，通常是“<code>master</code>”)</li></ul><h4 id="5-1-Maven的Profile管理"><a href="#5-1-Maven的Profile管理" class="headerlink" title="5.1 Maven的Profile管理"></a>5.1 Maven的Profile管理</h4><p><code>Maven</code>提供了<code>Profile</code>切换功能(多环境<code>dev,beta,prod</code>)， 如下<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认环境 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>beta<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>beta<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件<code>bootstrap.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:                             # Config客户端配置</span><br><span class="line">      profile: @activatedProperties@    # 启用配置后缀名称</span><br><span class="line">      label: master                     # 分支名称</span><br><span class="line">      uri: http://localhost:8009        # 配置中心地址</span><br><span class="line">      name: application                 # 配置文件名称</span><br></pre></td></tr></table></figure><p><code>SpringBoot</code>一把情况下会遵从你选的环境将<code>@activatedProperties@</code>替换掉。</p><p>但<code>SpringCloud</code>比较特殊，使用配置中心后客户端不会再使用<code>application.yml</code>，而是使用<code>bootstrap.yml</code>。但是<code>Maven</code>不认<code>bootstrap.yml</code>里的<code>@activatedProperties@</code>。</p><p><strong>解决</strong>：在<code>pom.xml</code>的<code>build</code>标签里添加如下代码，用于过滤<code>yml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--可以在此配置过滤文件  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--开启filtering功能  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-将不同服务的配置文件放到以服务名命名的目录下"><a href="#5-2-将不同服务的配置文件放到以服务名命名的目录下" class="headerlink" title="5.2 将不同服务的配置文件放到以服务名命名的目录下"></a>5.2 将不同服务的配置文件放到以服务名命名的目录下</h4><p>因为<code>config server</code>默认情况下只会搜索<code>git</code>仓库根路径下的配置文件，所以我们还需要加上一个配置项：<code>search-paths</code>，<br>该配置项用于指定<code>config server</code>搜索哪些路径下的配置文件，需要注意的是这个路径是相对于<code>git</code>仓库的，并非是项目的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          ...</span><br><span class="line">          search-paths: /**  # 指定搜索根路径下的所有目录，若有多个路径使用逗号隔开</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Spring-Cloud-Config简介&quot;&gt;&lt;a href=&quot;#1-Spring-Cloud-Config简介&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Cloud Config简介&quot;&gt;&lt;/a&gt;1. Spring Cloud Config简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Spring Cloud Config&lt;/code&gt;可以为微服务架构中的应用提供集中化的外部配置支持，它分为服务端和客户端两个部分。&lt;br&gt;服务端被称为分布式配置中心，它是个独立的应用，可以从配置仓库获取配置信息并提供给客户端使用。&lt;br&gt;客户端可以通过配置中心来获取配置信息，在启动时加载配置。&lt;br&gt;&lt;code&gt;Spring Cloud Config&lt;/code&gt;默认采用&lt;code&gt;Git&lt;/code&gt;来存储配置信息，所以天然就支持配置信息的版本管理，并且可以使用&lt;code&gt;Git&lt;/code&gt;客户端来方便地管理和访问配置信息。</summary>
    
    
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/categories/SpringCloud/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/tags/SpringCloud/"/>
    
    <category term="Config" scheme="http://chaooo.github.io/tags/Config/"/>
    
  </entry>
  
  <entry>
    <title>「SpringCloud」Gateway网关</title>
    <link href="http://chaooo.github.io/2021/10/29/spring-cloud-gateway.html"/>
    <id>http://chaooo.github.io/2021/10/29/spring-cloud-gateway.html</id>
    <published>2021-10-29T07:26:23.000Z</published>
    <updated>2022-04-17T08:11:11.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Gateway简介"><a href="#1-Gateway简介" class="headerlink" title="1. Gateway简介"></a>1. Gateway简介</h3><p>Spring Cloud Gateway 是基于 Spring5.0、SpringBoot2.0 和 Project Reactor 开发的网关，旨在提供一种简单而有效的方式来对API进行路由，基于过滤器链的方式提供：安全，监控&#x2F;埋点，和限流。</p><p>Spring Cloud Gateway 基于 Spring Boot2.x、Spring WebFlux 和 Project Reactor构建，属于异步非阻塞模型。<span id="more"></span></p><h3 id="1-1-核心概念"><a href="#1-1-核心概念" class="headerlink" title="1.1 核心概念"></a>1.1 核心概念</h3><p>路由（Route）：路由是网关最基础的部分，路由信息由ID、目标URI、一组断言和一组过滤器组成。如果断言路由为真，则说明请求的 URI 和配置匹配。</p><p>断言（Predicate）：Java8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于 Http Request 中的任何信息，比如请求头和参数等。</p><p>过滤器（Filter）：使用特定工厂构建的 Spring Framework GatewayFilter 实例。过滤器将会对请求和响应进行处理。</p><h3 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h3><p><img src="/2021/10/29/spring-cloud-gateway/up-d4f455febd78f36b2be8fcc90839349977e.webp"></p><p>客户端向 Spring Cloud Gateway 发出请求。 由网关处理程序 Gateway Handler Mapping 映射确定请求与路由匹配，则将其发送到网关 Web 处理程序 Gateway Web Handler。 Web 处理程序通过指定的过滤器链将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器被虚线分隔的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有 pre 过滤器逻辑，然后发出代理请求；发出代理请求后，将运行 post 过滤器逻辑。</p><h3 id="2-Gateway网关搭建"><a href="#2-Gateway网关搭建" class="headerlink" title="2. Gateway网关搭建"></a>2. Gateway网关搭建</h3><ol><li>在Spring Cloud父工程中创建module</li><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入spring cloud gateway依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入SpringCloud Eureka client依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>启动类上加注解<code>@EnableDiscoveryClient</code>注册到Eureka</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @EnableEurekaClient: 声明一个Eureka客户端，只能注册到Eureka Server</span></span><br><span class="line"><span class="comment">// @EnableDiscoveryClient: 声明一个可以被发现的客户端，可以是其他注册中心</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置文件application.yml</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 18001</span><br><span class="line"></span><br><span class="line"># 指定当前服务的名称，这个名称会注册到注册中心</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: @artifactId@</span><br><span class="line">  cloud:              # spring cloud gateway 路由配置方式</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:      # 是否与服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。</span><br><span class="line">        locator:      # 默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。</span><br><span class="line">          enabled: true</span><br><span class="line">        lowerCaseServiceId: true # 将请求路径的服务名配置改成小写</span><br><span class="line">      routes:</span><br><span class="line">        - id: user-server                 # 自定义的路由 ID，保持唯一性</span><br><span class="line">          uri: lb://XXXX-cloud-user       # 从注册中心获取服务，且以lb(load-balance)负载均衡方式转发</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/user/**               # 将以/user/开头的请求转发到uri为lb://XXXX-cloud-user的地址上</span><br><span class="line">        - id: product-server</span><br><span class="line">          uri: lb://XXXX-cloud-product</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/product/**            # 将以/product/开头的请求转发到uri为lb://XXXX-cloud-product的地址上</span><br><span class="line"></span><br><span class="line"># 指定服务注册中心的地址</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true       # 是否使用 ip 地址注册</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125; # ip:port</span><br><span class="line">  client:</span><br><span class="line">    service-url:                  # 设置服务注册中心地址</span><br><span class="line">      defaultZone: http://localhost:18000/eureka/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-路由配置"><a href="#3-路由配置" class="headerlink" title="3. 路由配置"></a>3. 路由配置</h3><h4 id="3-1-路由配置方式"><a href="#3-1-路由配置方式" class="headerlink" title="3.1 路由配置方式"></a>3.1 路由配置方式</h4><ol><li>基础URI路由配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: product-service         # 自定义的路由 ID，保持唯一</span><br><span class="line">          uri: http://localhost:9004  # 目标服务地址</span><br><span class="line">          predicates:                 # 断言（判断条件）：Predicate接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</span><br><span class="line">            - Path=/product/**</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>单个URI的地址的schema协议，一般为http或者https协议。 和注册中心相结合的路由配置的schema协议部分为自定义的lb:类型，表示从微服务注册中心（如Eureka）订阅服务，并且进行服务的路由。</p></blockquote><ol><li>基于代码的路由配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()   <span class="comment">// 参数分别为：路由 ID，断言（判断条件），目标服务地址</span></span><br><span class="line">                .route(<span class="string">&quot;product-service&quot;</span>, r -&gt; r.path(<span class="string">&quot;/product/**&quot;</span>).uri(<span class="string">&quot;http://localhost:9004&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-路由匹配规则"><a href="#3-2-路由匹配规则" class="headerlink" title="3.2 路由匹配规则"></a>3.2 路由匹配规则</h4><p>Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层支持来匹配到转发路由，Spring Cloud Gateway 内置了很多 Predicates 工厂，这些 Predicates 工厂通过不同的 HTTP 请求参数来匹配，多个 Predicates 工厂可以组合使用。</p><p>路由谓词工厂（Route Predicate Factories）</p><table><thead><tr><th>类型</th><th>路由谓词</th><th>路由谓词工厂</th><th>描述</th></tr></thead><tbody>  <tr><td rowspan="3">时间相关</td><td>After</td><td>AfterRoutePredicateFactory</td><td>在某个时间之后的请求才会被转发，如：`- After=2017-01-20T17:42:47.789-07:00[America/Denver]`</td></tr>  <tr><td>Before</td><td>BeforeRoutePredicateFactory</td><td>在某个时间之前的请求才会被转发，如：`- Before=2017-01-20T17:42:47.789-07:00[America/Denver]`</td></tr>  <tr><td>Between</td><td>BetweenRoutePredicateFactory</td><td>在某个时间段之间的才会被转发，如：`- Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]`</td></tr>  <tr><td>Cookie相关</td><td>Cookie</td><td>CookieRoutePredicateFactory</td><td>`- Cookie=chocolate, ch.p`名为chocolate的表单或者满足正则ch.p的表单才会被匹配到进行请求转发</td></tr>  <tr><td rowspan="2">Header相关</td><td>Header</td><td>HeaderRoutePredicateFactory</td><td>`- Header=X-Request-Id, \d+`携带参数X-Request-Id或者满足\d+的请求头才会匹配</td></tr>  <tr><td>Host</td><td>HostRoutePredicateFactory</td><td>`- Host=**.somehost.org,**.anotherhost.org`当主机名为somehost.org或anotherhost.org的时候才会被转发</td></tr>  <tr><td rowspan="5">请求相关</td><td>Method</td><td>MethodRoutePredicateFactory</td><td>`- Method=GET,POST`只有GET和POST方法才会匹配转发请求</td></tr>  <tr><td>Path</td><td>PathRoutePredicateFactory</td><td>`- Path=/red/{segment},/blue/{segment}`当请求的路径为/red/、/blue/开头的时才会被转发</td></tr>  <tr><td>Query</td><td>QueryRoutePredicateFactory</td><td>`- Query=green`只要请求中包含green参数即可</td></tr>  <tr><td>RemoteAddr</td><td>RemoteAddrRoutePredicateFactory</td><td>`- RemoteAddr=192.168.1.1/24`主机IP</td></tr>  <tr><td>Weight</td><td>WeightRoutePredicateFactory</td><td>`- Weight=group1, 2`权重是按组计算的, 两个参数：group 和 weight（int）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: predicate_route_test</span><br><span class="line">        uri: https://example.org</span><br><span class="line">        predicates:</span><br><span class="line">        - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</span><br><span class="line">        - Method=GET,POST</span><br><span class="line">        - Host=**.somehost.org,**.anotherhost.org</span><br><span class="line">        - Header=X-Request-Id, \d+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-过滤器规则"><a href="#4-过滤器规则" class="headerlink" title="4. 过滤器规则"></a>4. 过滤器规则</h3><p>Spring Cloud Gateway 除了具备请求路由功能之外，也支持对请求的过滤。</p><ul><li>Spring Cloud Gateway的Filter的生命周期：”pre”和”post”。<ul><li>PRE：这种过滤器在请求被路由之前调用。我们可以利用这种过滤器实现身份认证、在集群中选择请求的微服务、记录调试信息等。</li><li>POST：这种过滤器在路由到微服务以后执行。这种过滤器可以用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等等。</li></ul></li><li>Spring Cloud Gateway的Filter从作用范围可以分为两种：局部过滤器（GatewayFilter）和 全局过滤器（GlobalFilter）。<ul><li>GatewayFilter：应用到当个路由或者一个分组的路由上。</li><li>GlobalFilter：应用到所有的路由上。</li></ul></li></ul><h4 id="4-1-局部过滤器"><a href="#4-1-局部过滤器" class="headerlink" title="4.1 局部过滤器"></a>4.1 局部过滤器</h4><p>局部过滤器（GatewayFilter），是针对单个路由的过滤器。可以对访问的URL过滤，进行切面处理。Spring Cloud Gateway 包含许多内置的 GatewayFilter 工厂。</p><table><thead><tr><th>过滤器工厂</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>为原始请求添加Header</td><td>Header的名称及值</td></tr><tr><td>AddRequestParameter</td><td>为原始请求添加请求参数</td><td>参数名称及值</td></tr><tr><td>AddResponseHeader</td><td>为原始响应添加Header</td><td>Header的名称及值</td></tr><tr><td>DedupeResponseHeader</td><td>剔除响应头中重复的值</td><td>需要去重的Header名称及去重策略</td></tr><tr><td>CircuitBreaker</td><td>为路由引入CircuitBreaker的断路器保护</td><td>CircuitBreakerCommand的名称</td></tr><tr><td>MapRequestHeader</td><td>将fromHeader的值更新到toHeader</td><td>fromHeader名称, toHeader名称</td></tr><tr><td>FallbackHeaders</td><td>为fallbackUri的请求头中添加具体的异常信息</td><td>Header的名称</td></tr><tr><td>PrefixPath</td><td>为原始请求路径添加前缀</td><td>前缀路径</td></tr><tr><td>PreserveHostHeader</td><td>为请求添加一个 preserveHostHeader&#x3D;true的属 性，路由过滤器会检查该属性以 决定是否要发送原始的Host</td><td>无</td></tr><tr><td>RequestRateLimiter</td><td>用于对请求限流，限流算法为令 牌桶</td><td>keyResolver、 rateLimiter、 statusCode、 denyEmptyKey、 emptyKeyStatus</td></tr><tr><td>Redirect</td><td>将原始请求重定向到指定的URL</td><td>http状态码及重定向的 url</td></tr><tr><td>RemoveRequestHeader</td><td>为原始请求删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveResponseHeader</td><td>为原始响应删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveRequestParameter</td><td>为原始请求删除请求参数</td><td>参数名称</td></tr><tr><td>RewritePath</td><td>重写原始的请求路径</td><td>原始路径正则表达式以 及重写后路径的正则表 达式</td></tr><tr><td>RewriteLocationResponseHeader</td><td>重写响应头中 Location 的值</td><td>输入四个参数：stripVersionMode、locationHeaderName、hostValue、protocolsRegex</td></tr><tr><td>RewriteResponseHeader</td><td>重写原始响应中的某个Header</td><td>Header名称，值的正 则表达式，重写后的值</td></tr><tr><td>SaveSession</td><td>在转发请求之前，强制执行 WebSession::save操作</td><td>无</td></tr><tr><td>SecureHeaders</td><td>为原始响应添加一系列起安全作 用的响应头</td><td>无，支持修改这些安全 响应头的值</td></tr><tr><td>SetPath</td><td>修改原始的请求路径</td><td>修改后的路径</td></tr><tr><td>SetRequestHeader</td><td>重置请求头的值</td><td>Header的名称及值</td></tr><tr><td>SetResponseHeader</td><td>修改原始响应中某个Header的值</td><td>Header名称，修改后 的值</td></tr><tr><td>SetStatus</td><td>修改原始响应的状态码</td><td>HTTP 状态码，可以是 数字，也可以是字符串</td></tr><tr><td>StripPrefix</td><td>用于截断原始请求的路径</td><td>使用数字表示要截断的 路径的数量</td></tr><tr><td>Retry</td><td>针对不同的响应进行重试</td><td>retries、statuses、 methods、series</td></tr><tr><td>RequestSize</td><td>设置允许接最大请求包的大小。如果请求包大小超过设置的 值，则返回 413 Payload Too Large</td><td>请求包大小，单位为字 节，默认值为5M</td></tr><tr><td>SetRequestHost</td><td>用指定的值替换现有的host header</td><td>指定的Host</td></tr><tr><td>ModifyRequestBody</td><td>在转发请求之前修改原始请求体内容</td><td>修改后的请求体内容</td></tr><tr><td>ModifyResponseBody</td><td>修改原始响应体的内容</td><td>修改后的响应体内容</td></tr></tbody></table><blockquote><p>每个过滤器工厂都对应一个实体类，并且这些类的名称必须以GatewayFilterFactory结尾，这是Spring Cloud Gateway的一个约定，例如AddRequestHeader对一个的实体类为AddRequestHeaderGatewayFilterFactory。</p></blockquote><p>4.1.1 限流过滤器RequestRateLimiter</p><p>Spring Cloud Gateway官方提供了基于令牌桶的限流支持。 基于其内置的过滤器工厂RequestRateLimiterGatewayFilterFactory实现。 在过滤器工厂中是通过Redis和Lua脚本结合的方式进行流量控制。</p><ol><li>首先引入Redis依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- reactive redis依赖包（包含Lettuce客户端） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>               <span class="comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment"># 微服务名称以小写形式呈现</span></span><br><span class="line">      <span class="attr">routes:</span>       <span class="comment"># 配置路由： 路由id，路由到微服务的uri,断言（判断条件）</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span>       <span class="comment"># 路由id</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-product</span> <span class="comment"># 路由到微服务的uri。 lb://xxx，lb代表从注册中心获取服务列表，xxx代表需要转发的微服务的名称</span></span><br><span class="line">          <span class="attr">predicates:</span>               <span class="comment"># 断言（判断条件）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product-service/**</span></span><br><span class="line">          <span class="attr">filters:</span>   <span class="comment"># 配置路由过滤器</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span>                 <span class="comment"># 使用的限流过滤器是Spring Cloud Gateway提供的</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@pathKeyResolver&#125;&#x27;</span>   <span class="comment"># 使用SpEL从容器中获取对象</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span>   <span class="comment"># 令牌桶每秒填充平均速率，允许用户每秒处理多少个请求</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span>   <span class="comment"># 令牌桶的上限，令牌桶的容量，允许在一秒钟内完成的最大请求数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置Redis中key的解析器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyResolverConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于请求路径的限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">pathKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getPath().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于请求参数的限流</span></span><br><span class="line"><span class="comment">     * 请求/abc?userId=1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">useKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(Objects.requireNonNull(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;userId&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于请求IP地址的限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">ipKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(Objects.requireNonNull(exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;x-Forwarded-For&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway目前提供的限流还是比较简单的，在实际开发中我们的限流策略会有很多种情况， 比如：对不同接口的限流，被限流后的友好提示，这些可以通过自定义RedisRateLimiter来实现自己的限流策略。</p></blockquote><h4 id="4-2-全局过滤器"><a href="#4-2-全局过滤器" class="headerlink" title="4.2 全局过滤器"></a>4.2 全局过滤器</h4><p>全局过滤器（GlobalFilter）作用于所有路由，Spring Cloud Gateway定义了Global Filter接口，用户可以自定义实现自己的Global Filter。 通过全局过滤器可以实现对权限的统一校验，安全性校验等功能。</p><table><thead><tr><th>过滤器工厂</th><th>描述</th></tr></thead><tbody><tr><td>ForwardRoutingFilter</td><td>它会从exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);获取路由配置的URI，如果这个URI是forward模式，过滤器会将请求转发到DispatcherHandler，然后匹配到网关本的请求路径之中，原来请求的URI将被forward的URI覆盖，原始的请求URI被存储到exchange的ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR属性之中。</td></tr><tr><td>LoadBalancerClientFilter</td><td>它是用来处理负载均衡的过滤器。在网关后面的服务可以启动多个服务实例，这个过滤器就是把请求根据均衡规则路由到某台服务实例上面。它从exchange的ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR属性中获取URI，如果这个URI的scheme是“lb”，如：lb:&#x2F;&#x2F;myserivce，它会使用spring cloud 的LoadBalancerClient解析myservice服务名，获取一个服务实例的host和port，并替换原来的客户端请求。原来请求的url会存储在exchange的ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR属性中。这个过滤器也会从exchange中获取ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR属性值，如果它的值也是“lb”，也会使用相同的规则路由。</td></tr><tr><td>NettyRoutingFilter</td><td>这是一个优先级最低的过滤器，如果从exchange的ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR获取的URL的scheme是https或http，它将使用Netty的HttpClient创建向下执行的请求代理，请求返回的结果将存储在exchange的ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR属性中，过滤器链后面的过滤器可以从中获取返回的结果。（还有一个测试使用的过滤器，WebClientHttpRoutingFilter，它和NettyRoutingFilter的功能一样，但是不使用netty）。</td></tr><tr><td>NettyWriteResponseFilter</td><td>它的优先级是最高的，它是“post”类型的过滤器。如果在exchange中ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR的属性存在HttpClientResponse，它会在所有的其它的过滤器执行完成之后运行，将响应的数据发送给网关的客户端。</td></tr><tr><td>RouteToRequestUrlFilter</td><td>它的作用是把浏览器的URL请求的Path路径添加到路由的URI之中，比如浏览器请求网关的URL是：<code>http://localhost:8080/app-a/app/balance</code>，路由的URI配置是：<code>uri: lb://app-a</code>，那么添加之后的路由的URI是：<code>lb://app-a/app/balance</code>，并将它存储在exchange的ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR属性之中。</td></tr><tr><td>WebsocketRoutingFilter</td><td>它是用来路由WebScoket请求，在exchange的ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR的URI中，如果scheme是ws或wss，它会使用Spring Web Socket 模块转发WebSocket请求。WebSockets可以使用路由进行负载均衡，比如：lb:ws:&#x2F;&#x2F;serviceid。</td></tr><tr><td>GatewayMetricsFilter</td><td>它用来统计一些网关的性能指标。需要添加spring-boot-starter-actuator的项目依赖。</td></tr></tbody></table><p>在网关路由 ServerWebExchange 后，它将通过在 exchange 添加一个 gatewayAlreadyRouted 属性，从而将exchange标记为 routed 。一旦请求被标记为 routed ，其他路由过滤器将不会再次路由请求，而是直接跳过，防止重复的路由操。可以使用便捷方法将 exchange 标记为 routed ，或检查 exchange 是否是 routed。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServerWebExchangeUtils.isAlreadyRouted   <span class="comment">//检查是否已被路由</span></span><br><span class="line">ServerWebExchangeUtils.setAlreadyRouted  <span class="comment">//设置routed状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3-自定义全局过滤器鉴权"><a href="#4-3-自定义全局过滤器鉴权" class="headerlink" title="4.3 自定义全局过滤器鉴权"></a>4.3 自定义全局过滤器鉴权</h4><p>鉴权逻辑： ①当客户端第一次请求服务的时候，服务端对用户进行信息认证（登录）。 ②认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证。 ③以后每次请求，客户端都携带认证的token。 ④服务端对token进行解密，判断是否有效。</p><p>对于验证用户是否已经登录授权的过程可以在网关层统一校验。校验的标准就是请求中是否携带token凭证以及token的正确性。</p><p>这里代码实现仅判断是否携带token凭证：<code>TokenFilter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否携带token凭证</span></span><br><span class="line"><span class="comment">     * 对请求参数中的access-token进行判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeaders().getFirst(<span class="string">&quot;access-token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果token为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="comment">//设置Http的状态码</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="comment">//请求结束</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果token存在，继续执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定过滤器的执行顺序，返回值越小，优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Gateway简介&quot;&gt;&lt;a href=&quot;#1-Gateway简介&quot; class=&quot;headerlink&quot; title=&quot;1. Gateway简介&quot;&gt;&lt;/a&gt;1. Gateway简介&lt;/h3&gt;&lt;p&gt;Spring Cloud Gateway 是基于 Spring5.0、SpringBoot2.0 和 Project Reactor 开发的网关，旨在提供一种简单而有效的方式来对API进行路由，基于过滤器链的方式提供：安全，监控&amp;#x2F;埋点，和限流。&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway 基于 Spring Boot2.x、Spring WebFlux 和 Project Reactor构建，属于异步非阻塞模型。</summary>
    
    
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/categories/SpringCloud/"/>
    
    
    <category term="后端开发" scheme="http://chaooo.github.io/tags/back-end/"/>
    
    <category term="SpringCloud" scheme="http://chaooo.github.io/tags/SpringCloud/"/>
    
    <category term="Gateway" scheme="http://chaooo.github.io/tags/Gateway/"/>
    
  </entry>
  
</feed>
